[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/Intro.html","id":"installation-and-setup","dir":"Articles","previous_headings":"","what":"Installation and setup","title":"Intro","text":"","code":"library(roleR) set.seed(1)"},{"path":[]},{"path":"/articles/Intro.html","id":"basic-workflow","dir":"Articles","previous_headings":"","what":"Basic workflow","title":"Intro","text":"","code":"# set-up parameters p <- roleParams(   individuals_local = 1000,   individuals_meta = 10000,   species_meta = 50,   speciation_local = 0.5,   speciation_meta = 1,   extinction_meta = 0.8,   trait_sigma = 2,   env_sigma = 1,   comp_sigma = 1,   dispersal_prob = 0.5,   mutation_rate = 0.01,   equilib_escape = 1,   num_basepairs = 250,   init_type = 'oceanic_island',   niter = 1000,   niterTimestep = 100 )  # initialize the model m <- roleModel(p)  # run the model m <- runRole(m)  # get results getSumStats(m, list(rich = richness, hill = hillAbund)) #>    rich    hill_1   hill_2   hill_3   hill_4 iteration #> 1     1  1.000000 1.000000 1.000000 1.000000         0 #> 2    61  1.738264 1.165990 1.122234 1.107946       100 #> 3   111  2.894832 1.370332 1.267103 1.234211       200 #> 4   152  4.356454 1.580418 1.410737 1.357825       300 #> 5   200  6.983729 1.898131 1.619879 1.535380       400 #> 6   224  9.346873 2.173563 1.795125 1.682214       500 #> 7   262 12.993387 2.529392 2.013991 1.863411       600 #> 8   286 17.263090 2.975393 2.281054 2.081747       700 #> 9   311 21.831584 3.378995 2.512399 2.268466       800 #> 10  326 27.413825 3.925756 2.818864 2.513095       900 #> 11  350 34.395965 4.623764 3.202828 2.816030      1000"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"/articles/UseCases.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"UseCases","text":"Install GitHub Run model plot species richness time","code":"# devtools::install_github(\"role-model/roleR\")  library(roleR) library(ggplot2) p <- roleParams(     individuals_local = 100,     individuals_meta = 1000,     species_meta = 50,     speciation_local = 0.05,     speciation_meta = 0.05,     extinction_meta = 0.05,     env_sigma = 0.5,     trait_sigma = 1,     comp_sigma = 0.5,     dispersal_prob = 0.1,     mutation_rate = 0.01,     equilib_escape = 1,     num_basepairs = 250,     init_type = 'oceanic_island',     niter = 1000,     niterTimestep = 100 )  model <- runRole(roleModel(p)) stats <-     getSumStats(model, funs = list(rich = richness)) #TODO add default where all existing sumstats are added ggplot(stats, aes(iteration, rich)) +     geom_line()"},{"path":"/articles/UseCases.html","id":"parameter-creation","dir":"Articles","previous_headings":"","what":"Parameter Creation","title":"UseCases","text":"Create set parameters specifying every one Create set params per Unified Neutral Theory Biodiversity (UNTB). creates “UNTB-flavored” RoLE model See roleParams documentation descriptions available parameters Group Question: default parameters exist simply p <- roleParams() creates valid params? defaults ?","code":"p <- roleParams(individuals_local = 100, individuals_meta = 1000, species_meta = 100,                      speciation_local = 0.1, speciation_meta = 0.1, extinction_meta = 0.05, dispersal_prob = 0.1,                     trait_sigma=1, env_sigma=1, comp_sigma = 0.5, neut_delta=1, env_comp_delta=1,                     mutation_rate=0,equilib_escape = 1, alpha=50, num_basepairs = 250,                     init_type = 'oceanic_island', niter = 1000, niterTimestep = 10) p_untb <- untbParams(individuals_local = 100, individuals_meta = 1000,                          species_meta = 50,                          speciation = 0.2,                          dispersal_prob = 0.1, init_type = 'oceanic_island',                         niter = 1000, niterTimestep = 100)"},{"path":"/articles/UseCases.html","id":"model-experiment-creation-running","dir":"Articles","previous_headings":"","what":"Model & Experiment Creation & Running","title":"UseCases","text":"Create model (yet run) using params, run Create experiment (yet run) containing two models created using sets params, run . Experiment running can parallelized Windows, Mac, & Linux specifying number cores use. run experiment, runs every model within . Experiments intended encapsulate one hypotheses comparison multiple varying models contained within Group Question: encapsulating multiple models experiments useful, rather deal models individually use cases?","code":"model <- roleModel(p) model <- runRole(model) exp <- roleExperiment(list(p,p_untb)) library(parallel) exp <- runRole(exp,cores=2)"},{"path":"/articles/UseCases.html","id":"extracting-data-from-models","dir":"Articles","previous_headings":"","what":"Extracting Data From Models","title":"UseCases","text":"Get summary stats time single model, row different saved iteration state. Available raw stats rawAbundance, rawSpAbundance, rawTraits, rawGenDiv, rawBranchLengths, rawApePhylo. Available transformed stats hillAbund, hillGenetic, hillTrait, hillPhylo, richness. Get summary stats time one model experiment Create custom summary statistic extract Group Question: ideas default summary stats add? Group Question: Besides plotting model data model iterations, plotting functions want?","code":"stats <- getSumStats(model, list(rich = richness,hill_abund=hillAbund)) stats stats <- getSumStats(exp@modelRuns[[1]], list(hill_abund=hillAbund)) speciesWith5Indv <- function(x){return(sum(x@localComm@spAbund > 4))}  stats <- getSumStats(exp@modelRuns[[1]], list(sp_with_5=speciesWith5Indv))"},{"path":"/articles/UseCases.html","id":"extracting-data-from-experiments","dir":"Articles","previous_headings":"","what":"Extracting Data From Experiments","title":"UseCases","text":"Get dataframe containing saved timesteps models experiment Get dataframe containing model metadata experiment, row experiment associated params Get transformed summary stats (mean stat iteration multiple models) experiment (WIP) Group Question: transformed summary stats summarized multiple models useful? multiple-model-summarizing functions mean? Also let us know concept unclear, little confusing.","code":"stats <- getSumStats(exp, list(hill_abund=hillAbund)) exp_model_params <- exp@experimentMeta # stats <- getSumStats(exp, list(hill_abund_itermean=hillAbundItermean))  ## where hillAbundItermean is a function that applies across an experiment rather than across a roleData"},{"path":"/articles/UseCases.html","id":"parameter-priors-iter-functions-not-current","dir":"Articles","previous_headings":"","what":"Parameter Priors & Iter-Functions (NOT CURRENT)","title":"UseCases","text":"Functions can set sample params every iteration step prior function takes inputs returns parameter value Change one parameter sampled normal distribution every iteration iter-function takes iteration number returns parameter value Change one parameter increase linearly every iteration Create simple piecewise function param changes iterations Group Question: ways want vary parameters? priors iterfuncs capture kind parameter variability want? Group Question: considering two ways handling priors iterfuns. first allow parameter slot include either vector function example. second additional class called roleFunctions overwrite params contains, purpose avoiding confusion caused multiple-class slot. Let us know feelings !","code":"p@speciation_local <- function(){return(rnorm(1,mean=0.05,sd=0.01))} p@speciation_local <- function(iter){return(iter * 0.001)}  plot(1:1000 * 0.001,xlab = \"iteration\",ylab = \"speciation rate\") #p@env_sigma <- function(iter){  #        if(iter > 400 & iter < 600){  #            return(0.75)  #        }  #        else{  #            return(0.5)  #        }  #    }"},{"path":"/articles/UseCases.html","id":"simulating-genetic-diversities-not-current","dir":"Articles","previous_headings":"","what":"Simulating Genetic Diversities (NOT CURRENT)","title":"UseCases","text":"Add genetic diversities run model backwards time simulation using msprime","code":"#model <- simulateSpeciesGenDiv(model)"},{"path":"/articles/UseCases.html","id":"experiment-organization","dir":"Articles","previous_headings":"","what":"Experiment Organization","title":"UseCases","text":"Tag models experiment comparison different tags Set metadata experiment within object, exported saving Group Question: basic metadata sufficient? description split specific parts?","code":"names(exp@modelRuns) <- c(\"basic\",\"neut\") exp@authorMeta <- c(\"author\"=\"Jacob Idec\",\"description\"=\"dummy model\")"},{"path":"/articles/UseCases.html","id":"writing-and-loading","dir":"Articles","previous_headings":"","what":"Writing and Loading","title":"UseCases","text":"Write load models, experiments, params","code":"writeRole(exp,dir=\"\",filename=\"test\",save_txt = T)  #exp <- readRDS(\"test.roleexperiment\")"},{"path":"/articles/UseCases.html","id":"predictive-models-not-current","dir":"Articles","previous_headings":"","what":"Predictive Models (NOT CURRENT)","title":"UseCases","text":"Use run experiment make model predicting parameter summary stats","code":"#pred_model <- createPredModel(exp,param_name = \"speciation_local\", preds=c(\"hill_abund1\",\"hill_abund2\"))"},{"path":"/articles/roleR_intro.html","id":"installation-and-setup","dir":"Articles","previous_headings":"","what":"Installation and setup","title":"Introduction and basic workflow","text":"","code":"library(roleR) set.seed(1)"},{"path":[]},{"path":"/articles/roleR_intro.html","id":"basic-workflow","dir":"Articles","previous_headings":"","what":"Basic workflow","title":"Introduction and basic workflow","text":"","code":"# set-up parameters p <- roleParams(   individuals_local = 1000,   individuals_meta = 10000,   species_meta = 50,   speciation_local = 0.5,   speciation_meta = 1,   extinction_meta = 0.8,   trait_sigma = 2,   env_sigma = 1,   comp_sigma = 1,   dispersal_prob = 0.5,   mutation_rate = 0.01,   equilib_escape = 1,   num_basepairs = 250,   init_type = 'oceanic_island',   niter = 1000,   niterTimestep = 100 )  # initialize the model m <- roleModel(p)  # run the model m <- runRole(m)  # get results getSumStats(m, list(rich = richness, hill = hillAbund)) #>    rich    hill_1   hill_2   hill_3   hill_4 iteration #> 1     1  1.000000 1.000000 1.000000 1.000000         0 #> 2    51  1.616558 1.143665 1.106069 1.093749       100 #> 3    95  2.538301 1.317391 1.230188 1.202197       200 #> 4   140  3.898818 1.522533 1.371732 1.324402       300 #> 5   179  6.039233 1.816385 1.567679 1.491336       400 #> 6   213  8.298739 2.079305 1.737026 1.633769       500 #> 7   251 11.905958 2.449144 1.966676 1.824506       600 #> 8   283 16.298453 2.866677 2.217334 2.029982       700 #> 9   300 20.138604 3.263878 2.450606 2.219079       800 #> 10  322 25.528281 3.780318 2.743955 2.454086       900 #> 11  342 31.906515 4.421375 3.100292 2.736337      1000"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"/articles/roleR_use_cases.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"roleR Use Cases","text":"Install GitHub Run model plot species richness time","code":"# devtools::install_github(\"role-model/roleR\")  library(roleR) library(ggplot2) p <- roleParams(     individuals_local = 100,     individuals_meta = 1000,     species_meta = 50,     speciation_local = 0.05,     speciation_meta = 0.05,     extinction_meta = 0.05,     env_sigma = 0.5,     trait_sigma = 1,     comp_sigma = 0.5,     dispersal_prob = 0.1,     mutation_rate = 0.01,     equilib_escape = 1,     num_basepairs = 250,     init_type = 'oceanic_island',     niter = 1000,     niterTimestep = 100 )  model <- runRole(roleModel(p)) stats <-     getSumStats(model, funs = list(rich = richness)) #TODO add default where all existing sumstats are added ggplot(stats, aes(iteration, rich)) +     geom_line()"},{"path":"/articles/roleR_use_cases.html","id":"parameter-creation","dir":"Articles","previous_headings":"","what":"Parameter Creation","title":"roleR Use Cases","text":"Create set parameters specifying every one Create set params per Unified Neutral Theory Biodiversity (UNTB). creates “UNTB-flavored” RoLE model See roleParams documentation descriptions available parameters Group Question: default parameters exist simply p <- roleParams() creates valid params? defaults ?","code":"p <- roleParams(individuals_local = 100, individuals_meta = 1000, species_meta = 100,                      speciation_local = 0.1, speciation_meta = 0.1, extinction_meta = 0.05, dispersal_prob = 0.1,                     trait_sigma=1, env_sigma=1, comp_sigma = 0.5, neut_delta=1, env_comp_delta=1,                     mutation_rate=0,equilib_escape = 1, alpha=50, num_basepairs = 250,                     init_type = 'oceanic_island', niter = 1000, niterTimestep = 10) p_untb <- untbParams(individuals_local = 100, individuals_meta = 1000,                          species_meta = 50,                          speciation = 0.2,                          dispersal_prob = 0.1, init_type = 'oceanic_island',                         niter = 1000, niterTimestep = 100)"},{"path":"/articles/roleR_use_cases.html","id":"model-experiment-creation-running","dir":"Articles","previous_headings":"","what":"Model & Experiment Creation & Running","title":"roleR Use Cases","text":"Create model (yet run) using params, run Create experiment (yet run) containing two models created using sets params, run . Experiment running can parallelized Windows, Mac, & Linux specifying number cores use. run experiment, runs every model within . Experiments intended encapsulate one hypotheses comparison multiple varying models contained within Group Question: encapsulating multiple models experiments useful, rather deal models individually use cases?","code":"model <- roleModel(p) model <- runRole(model) exp <- roleExperiment(list(p,p_untb)) library(parallel) exp <- runRole(exp,cores=2)"},{"path":"/articles/roleR_use_cases.html","id":"extracting-data-from-models","dir":"Articles","previous_headings":"","what":"Extracting Data From Models","title":"roleR Use Cases","text":"Get summary stats time single model, row different saved iteration state. Available raw stats rawAbundance, rawSpAbundance, rawTraits, rawGenDiv, rawBranchLengths, rawApePhylo. Available transformed stats hillAbund, hillGenetic, hillTrait, hillPhylo, richness. Get summary stats time one model experiment Create custom summary statistic extract Group Question: ideas default summary stats add? Group Question: Besides plotting model data model iterations, plotting functions want?","code":"stats <- getSumStats(model, list(rich = richness,hill_abund=hillAbund)) stats stats <- getSumStats(exp@modelRuns[[1]], list(hill_abund=hillAbund)) speciesWith5Indv <- function(x){return(sum(x@localComm@spAbund > 4))}  stats <- getSumStats(exp@modelRuns[[1]], list(sp_with_5=speciesWith5Indv))"},{"path":"/articles/roleR_use_cases.html","id":"extracting-data-from-experiments","dir":"Articles","previous_headings":"","what":"Extracting Data From Experiments","title":"roleR Use Cases","text":"Get dataframe containing saved timesteps models experiment Get dataframe containing model metadata experiment, row experiment associated params Get transformed summary stats (mean stat iteration multiple models) experiment (WIP) Group Question: transformed summary stats summarized multiple models useful? multiple-model-summarizing functions mean? Also let us know concept unclear, little confusing.","code":"stats <- getSumStats(exp, list(hill_abund=hillAbund)) exp_model_params <- exp@experimentMeta # stats <- getSumStats(exp, list(hill_abund_itermean=hillAbundItermean))  ## where hillAbundItermean is a function that applies across an experiment rather than across a roleData"},{"path":"/articles/roleR_use_cases.html","id":"parameter-priors-iter-functions-not-current","dir":"Articles","previous_headings":"","what":"Parameter Priors & Iter-Functions (NOT CURRENT)","title":"roleR Use Cases","text":"Functions can set sample params every iteration step prior function takes inputs returns parameter value Change one parameter sampled normal distribution every iteration iter-function takes iteration number returns parameter value Change one parameter increase linearly every iteration Create simple piecewise function param changes iterations Group Question: ways want vary parameters? priors iterfuncs capture kind parameter variability want? Group Question: considering two ways handling priors iterfuns. first allow parameter slot include either vector function example. second additional class called roleFunctions overwrite params contains, purpose avoiding confusion caused multiple-class slot. Let us know feelings !","code":"p@speciation_local <- function(){return(rnorm(1,mean=0.05,sd=0.01))} p@speciation_local <- function(iter){return(iter * 0.001)}  plot(1:1000 * 0.001,xlab = \"iteration\",ylab = \"speciation rate\") #p@env_sigma <- function(iter){  #        if(iter > 400 & iter < 600){  #            return(0.75)  #        }  #        else{  #            return(0.5)  #        }  #    }"},{"path":"/articles/roleR_use_cases.html","id":"simulating-genetic-diversities-not-current","dir":"Articles","previous_headings":"","what":"Simulating Genetic Diversities (NOT CURRENT)","title":"roleR Use Cases","text":"Add genetic diversities run model backwards time simulation using msprime","code":"#model <- simulateSpeciesGenDiv(model)"},{"path":"/articles/roleR_use_cases.html","id":"experiment-organization","dir":"Articles","previous_headings":"","what":"Experiment Organization","title":"roleR Use Cases","text":"Tag models experiment comparison different tags Set metadata experiment within object, exported saving Group Question: basic metadata sufficient? description split specific parts?","code":"names(exp@modelRuns) <- c(\"basic\",\"neut\") exp@authorMeta <- c(\"author\"=\"Jacob Idec\",\"description\"=\"dummy model\")"},{"path":"/articles/roleR_use_cases.html","id":"writing-and-loading","dir":"Articles","previous_headings":"","what":"Writing and Loading","title":"roleR Use Cases","text":"Write load models, experiments, params","code":"writeRole(exp,dir=\"\",filename=\"test\",save_txt = T)  #exp <- readRDS(\"test.roleexperiment\")"},{"path":"/articles/roleR_use_cases.html","id":"predictive-models-not-current","dir":"Articles","previous_headings":"","what":"Predictive Models (NOT CURRENT)","title":"roleR Use Cases","text":"Use run experiment make model predicting parameter summary stats","code":"#pred_model <- createPredModel(exp,param_name = \"speciation_local\", preds=c(\"hill_abund1\",\"hill_abund2\"))"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Rominger. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rominger , Idec J, Diaz R (2023). roleR: Rules Life Engine. R package version 0.1.0.","code":"@Manual{,   title = {roleR: Rules of Life Engine},   author = {Andrew Rominger and Jacob Idec and Renata Diaz},   year = {2023},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"roler","dir":"","previous_headings":"","what":"Rules of Life Engine","title":"Rules of Life Engine","text":"R package implementing RoLE model Installation: Link intro vignette","code":"library(remotes) remotes::install_github(\"role-model/roleR\",dependencies=TRUE)"},{"path":"/reference/buildFun.html","id":null,"dir":"Reference","previous_headings":"","what":"buildFun — buildFun","title":"buildFun — buildFun","text":"helper , given single value, builds function","code":""},{"path":"/reference/buildFun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"buildFun — buildFun","text":"","code":"buildFun(p)"},{"path":"/reference/buildFun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"buildFun — buildFun","text":"p something magical","code":""},{"path":"/reference/buildFun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"buildFun — buildFun","text":"p stretched niter","code":""},{"path":"/reference/cFun.html","id":null,"dir":"Reference","previous_headings":"","what":"C fun wrapper — cFun","title":"C fun wrapper — cFun","text":"(RMD believes) used port R C functions.","code":""},{"path":"/reference/cFun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"C fun wrapper — cFun","text":"","code":"cFun(   type = \"int\",   fun_name = \"sample_index_using_probs\",   data = NULL,   params = NULL,   i = 0,   probs = c(0),   x = 0,   dead_index = 0,   parent_indv = 0,   dispersed_this_iter = TRUE,   speciation_sp = 0 )"},{"path":"/reference/cFun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"C fun wrapper — cFun","text":"type type fun_name fun_name data data params params probs probs x x dead_index dead_index parent_indv parent_indv dispersed_this_iter dispersed_this_iter speciation_sp speciation_sp","code":""},{"path":"/reference/cFun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"C fun wrapper — cFun","text":"corresponding C function","code":""},{"path":"/reference/checkRolePhylo.html","id":null,"dir":"Reference","previous_headings":"","what":"check RolePhylo\nchecker function for validation — checkRolePhylo","title":"check RolePhylo\nchecker function for validation — checkRolePhylo","text":"check RolePhylo checker function validation","code":""},{"path":"/reference/checkRolePhylo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check RolePhylo\nchecker function for validation — checkRolePhylo","text":"","code":"checkRolePhylo(object)"},{"path":"/reference/checkRolePhylo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check RolePhylo\nchecker function for validation — checkRolePhylo","text":"object supposed rolePhylo","code":""},{"path":"/reference/checkRolePhylo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check RolePhylo\nchecker function for validation — checkRolePhylo","text":"t/f rolePhylo","code":""},{"path":"/reference/createPredModel.html","id":null,"dir":"Reference","previous_headings":"","what":"createPredModel — createPredModel","title":"createPredModel — createPredModel","text":"create random forest model predict parameter value using summary statistics","code":""},{"path":"/reference/createPredModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"createPredModel — createPredModel","text":"","code":"createPredModel(exp, paramName)"},{"path":"/reference/createPredModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"createPredModel — createPredModel","text":"exp roleExperiment use training set paramName parameter predict","code":""},{"path":"/reference/createRolePredModel.html","id":null,"dir":"Reference","previous_headings":"","what":"createRolePredModel — createRolePredModel","title":"createRolePredModel — createRolePredModel","text":"create random forest model predict parameter value using summary statistics","code":""},{"path":"/reference/createRolePredModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"createRolePredModel — createRolePredModel","text":"","code":"createRolePredModel(expr, pred_param_name)"},{"path":"/reference/createRolePredModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"createRolePredModel — createRolePredModel","text":"exp `roleExperiment` use models training validation predParam name parameter predict","code":""},{"path":"/reference/div-sumStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Hill number summary statistics for `roleData` objects. — hillAbund","title":"Hill number summary statistics for `roleData` objects. — hillAbund","text":"functions calculate Hill numbers. naming convention      indicates type Hill number function calculates; e.g.      `hillAbund` calculates abundance-based Hill numbers, `hillTrait`      calculates trait-based Hill numbers.","code":""},{"path":"/reference/div-sumStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hill number summary statistics for `roleData` objects. — hillAbund","text":"","code":"hillAbund(x, q = 1:4, ...)  hillGenetic(x, q = 1:4, ...)  hillTrait(x, q = 1:4, ...)  hillPhylo(x, q = 1:4, ...)  richness(x, ...)"},{"path":"/reference/div-sumStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hill number summary statistics for `roleData` objects. — hillAbund","text":"x `roleData` object calculate Hill numbers richness q Hill number exponents. Can single value vector integers. ... additional parameters, ignored","code":""},{"path":"/reference/div-sumStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hill number summary statistics for `roleData` objects. — hillAbund","text":"See Gaggiotti et al. 2018 overview Hill numbers context ecology evolution.","code":""},{"path":"/reference/div-sumStats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hill number summary statistics for `roleData` objects. — hillAbund","text":"Gaggiotti, Oscar E, Anne Chao, Pedro Peres-Neto, Chun-Huo Chiu, Christine Edwards, Marie-Josée Fortin, Lou Jost, Christopher M Richards, Kimberly Selkoe. “Diversity Genes Ecosystems: Unifying Framework Study Variation across Biological Metrics Scales.” Evol. Appl. 11, . 7 (2018): 1176–93. https://doi.org/10.1111/eva.12593.","code":""},{"path":"/reference/dot-bufferModelData.html","id":null,"dir":"Reference","previous_headings":"","what":"buffer model data — .bufferModelData","title":"buffer model data — .bufferModelData","text":"user-inaccessible helper augment data -yet-run model based  expected params called right model run Cpp","code":""},{"path":"/reference/dot-bufferModelData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"buffer model data — .bufferModelData","text":"","code":".bufferModelData(model)"},{"path":"/reference/dot-bufferModelData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"buffer model data — .bufferModelData","text":"model model","code":""},{"path":"/reference/dot-bufferModelData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"buffer model data — .bufferModelData","text":"model","code":""},{"path":"/reference/dot-hillDivSAD.html","id":null,"dir":"Reference","previous_headings":"","what":"HillDivSAD\nfunction for abundance-based — .hillDivSAD","title":"HillDivSAD\nfunction for abundance-based — .hillDivSAD","text":"HillDivSAD function abundance-based","code":""},{"path":"/reference/dot-hillDivSAD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HillDivSAD\nfunction for abundance-based — .hillDivSAD","text":"","code":".hillDivSAD(n, q)"},{"path":"/reference/dot-hillDivSAD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HillDivSAD\nfunction for abundance-based — .hillDivSAD","text":"n vector species abundances q hill order","code":""},{"path":"/reference/dot-hillDivTrait.html","id":null,"dir":"Reference","previous_headings":"","what":"HillDivTrait\nfunction for trait-based — .hillDivTrait","title":"HillDivTrait\nfunction for trait-based — .hillDivTrait","text":"HillDivTrait function trait-based","code":""},{"path":"/reference/dot-hillDivTrait.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HillDivTrait\nfunction for trait-based — .hillDivTrait","text":"","code":".hillDivTrait(X, q)"},{"path":"/reference/dot-hillDivTrait.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HillDivTrait\nfunction for trait-based — .hillDivTrait","text":"X matrix first column = abund, second column = traits traits vector traits","code":""},{"path":"/reference/dot-lseriesFromSN.html","id":null,"dir":"Reference","previous_headings":"","what":"Logseries from S and N — .lseriesFromSN","title":"Logseries from S and N — .lseriesFromSN","text":"function solve parameter logseries","code":""},{"path":"/reference/dot-lseriesFromSN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logseries from S and N — .lseriesFromSN","text":"","code":".lseriesFromSN(S, N)"},{"path":"/reference/dot-lseriesFromSN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logseries from S and N — .lseriesFromSN","text":"S number species N number individuals","code":""},{"path":"/reference/getFinalState.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the final state of a model run. — getFinalState","title":"Get the final state of a model run. — getFinalState","text":"Gets final state model either `roleExperiment`      `roleModel`.","code":""},{"path":"/reference/getFinalState.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the final state of a model run. — getFinalState","text":"","code":"getFinalState(x, modID, ...)"},{"path":"/reference/getFinalState.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the final state of a model run. — getFinalState","text":"x `roleExperiment` `roleModel` object retrieve final state . modID Optional argument retrieve final state specific model(s) `roleExperiment` object; can vector unique IDs.","code":""},{"path":"/reference/getFinalState.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the final state of a model run. — getFinalState","text":"`modID` supplied `x` `roleExperiment`,      list `roleData` objects model run returned.","code":""},{"path":"/reference/getFinalState.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the final state of a model run. — getFinalState","text":"","code":"# get the final state of a roleModel as a roleModel (but maybe should be roleData?) m <- quickModel() final_data <- getFinalState(m)@modelSteps[[1]]"},{"path":"/reference/getSumStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get summary statistics for RoLE objects. — getSumStats","title":"Get summary statistics for RoLE objects. — getSumStats","text":"Applies different summary statistics functions `roleExperiment`,     `roleModel`, `roleData` objects.","code":""},{"path":"/reference/getSumStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get summary statistics for RoLE objects. — getSumStats","text":"","code":"getSumStats(x, funs = .getDefaultSumStatsFuns(), moreArgs, ...)  # S4 method for roleData getSumStats(x, funs, moreArgs)  # S4 method for roleModel getSumStats(x, funs, moreArgs)  # S4 method for roleExperiment getSumStats(x, funs, moreArgs)"},{"path":"/reference/getSumStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get summary statistics for RoLE objects. — getSumStats","text":"x object calculate summary statistics . funs named list functions calculate summary statistics; can  named list single function many functions, must  named list functions. unspecified, defaults including several standard stats.  Included diversity index functions roleR : `hillAbund`,  `hillGenetic`,`hillPhylo` & `richness`. Included raw stats functions `rawAbundance`, `rawSpAbundance`,`rawSppId`,`rawTraits`,`rawGenDiv`,`rawSeqs`, `rawBranchLengths` & `rawApePhylo`. moreArgs optional named list additional arguments pass functions listed `funs`. given, list names must match  `funs`. Note: names `funs` need appear `moreArgs` ... ignored","code":""},{"path":"/reference/getSumStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get summary statistics for RoLE objects. — getSumStats","text":"data.frame containing summary stats row model snapshot column summary stat requested function provided `funs`","code":""},{"path":"/reference/getSumStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get summary statistics for RoLE objects. — getSumStats","text":"Users can define functions, long work     object class `roleData`.","code":""},{"path":"/reference/getSumStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get summary statistics for RoLE objects. — getSumStats","text":"","code":"# get the species richness  # rich_stat <- getSumStats(model, funs = list(rich = richness)) # get many default summary stats # stats <- getSumStats(model)"},{"path":"/reference/getSumStatsMean.html","id":null,"dir":"Reference","previous_headings":"","what":"Get SumStats mean — getSumStatsMean","title":"Get SumStats mean — getSumStatsMean","text":"Get SumStats mean","code":""},{"path":"/reference/getSumStatsMean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get SumStats mean — getSumStatsMean","text":"","code":"getSumStatsMean(x, funs)"},{"path":"/reference/getSumStatsMean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get SumStats mean — getSumStatsMean","text":"x x funs funs","code":""},{"path":"/reference/getSumStatsMean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get SumStats mean — getSumStatsMean","text":"something","code":""},{"path":"/reference/getTimeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a timeseries from a roleModel or roleExperiment as a dataframe — getTimeseries","title":"Get a timeseries from a roleModel or roleExperiment as a dataframe — getTimeseries","text":"Get timeseries roleModel roleExperiment dataframe","code":""},{"path":"/reference/getTimeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a timeseries from a roleModel or roleExperiment as a dataframe — getTimeseries","text":"","code":"getTimeseries(x, ...)"},{"path":"/reference/getTimeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a timeseries from a roleModel or roleExperiment as a dataframe — getTimeseries","text":"x roleModel roleExperiment object get timeseries fun function applies roleData objects gather data  apply applies fun across list roleData roleModel lastColAsTitle specify use last column gathered fun column names output dataframe","code":""},{"path":"/reference/getTimeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a timeseries from a roleModel or roleExperiment as a dataframe — getTimeseries","text":"dataframe containing timeseries","code":""},{"path":"/reference/getValuesFromParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Get vals from params — getValuesFromParams","title":"Get vals from params — getValuesFromParams","text":"run iter functions params generate new object class paramValues contains vectors values functions","code":""},{"path":"/reference/getValuesFromParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get vals from params — getValuesFromParams","text":"","code":"getValuesFromParams(p)"},{"path":"/reference/getValuesFromParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get vals from params — getValuesFromParams","text":"p params","code":""},{"path":"/reference/getValuesFromParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get vals from params — getValuesFromParams","text":"processed params","code":""},{"path":"/reference/localComm.html","id":null,"dir":"Reference","previous_headings":"","what":"The local community of a `roleData` — localComm-class","title":"The local community of a `roleData` — localComm-class","text":"S4 class specify state local community","code":""},{"path":"/reference/localComm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The local community of a `roleData` — localComm-class","text":"","code":"localComm(indSpecies, indTrait, indSeqs, spGenDiv)"},{"path":"/reference/localComm.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The local community of a `roleData` — localComm-class","text":"indSpecies numeric vector species IDs individual example indSpecies[2] ID species individual 2 indTrait numeric vector trait values individual indSeqs character vector gene sequences individual spGenDiv numeric vector genetic diversities species spTrait numeric vector mean trait value species spAbund numeric vector abundance (number individuals) species spAbundHarmMean numeric vector harmonic mean species abundances Equivalent n / reciprocal sum abundances since last emergence n number steps reciprocal sum Used genetic simulation roleR spLastOriginStep numeric vector last origin step species last origin step last step new species appeared local community (either totally new extinction local) Used genetic simulation roleR spExtinctionStep numeric vector last extinction (extirpation) step species Used genetic simulation roleR","code":""},{"path":"/reference/metaComm.html","id":null,"dir":"Reference","previous_headings":"","what":"The metacommunity of a `roleData` — metaComm-class","title":"The metacommunity of a `roleData` — metaComm-class","text":"S4 class specify state metacommunity","code":""},{"path":"/reference/metaComm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The metacommunity of a `roleData` — metaComm-class","text":"","code":"metaComm(spAbund, spTrait)"},{"path":"/reference/metaComm.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The metacommunity of a `roleData` — metaComm-class","text":"spAbund numeric vector relative abundances species meta community example spAbundTrt[3] relative abundance species 3 spTrait numeric vector average trait value species meta community","code":""},{"path":"/reference/paramValues.html","id":null,"dir":"Reference","previous_headings":"","what":"paramValues clas — paramValues-class","title":"paramValues clas — paramValues-class","text":"paramValues clas","code":""},{"path":"/reference/paramValues.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"paramValues clas — paramValues-class","text":"individuals_local numeric. individuals_meta numeric. species_meta numeric. speciation_local numeric. speciation_meta numeric. extinction_meta numeric. trait_sigma numeric. env_sigma numeric. comp_sigma numeric. neut_delta numeric. env_comp_delta numeric. dispersal_prob numeric. mutation_rate numeric. equilib_escape numeric. alpha numeric. num_basepairs numeric. init_type character. niter integer. niterTimestep integer.","code":""},{"path":"/reference/quickParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal functions to facilitate vignette examples. — quickParams","title":"Internal functions to facilitate vignette examples. — quickParams","text":"Internal functions facilitate vignette examples.","code":""},{"path":"/reference/quickParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal functions to facilitate vignette examples. — quickParams","text":"","code":"quickParams()"},{"path":"/reference/raw-sumStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get raw data from `roleData` objects. — rawAbundance","title":"Get raw data from `roleData` objects. — rawAbundance","text":"Gets raw data according function specification.","code":""},{"path":"/reference/raw-sumStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get raw data from `roleData` objects. — rawAbundance","text":"","code":"rawAbundance(x, ...)  rawSppID(x, ...)  rawTraits(x, ...)  rawGenDiv(x, ...)  rawSeqs(x, ...)  rawBranchLengths(x, ...)  rawApePhylo(x, ...)"},{"path":"/reference/raw-sumStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get raw data from `roleData` objects. — rawAbundance","text":"x `roleData` object. ... Additional parameters, ignored.","code":""},{"path":"/reference/raw-sumStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get raw data from `roleData` objects. — rawAbundance","text":"list one element. Inside one element vector     raw data.","code":""},{"path":"/reference/raw-sumStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get raw data from `roleData` objects. — rawAbundance","text":"functions return list length one (summary statistics vector     inside list) summary statistics can variable     length. distinct summary statistic functions     always return fixed length value.  using raw summary statistic     functions `getSumStats` returned list-column.     rawAbundance gets unordered abundance species,      rawSpAbundance gets ordered abundance species much longer vector","code":""},{"path":"/reference/roleData.html","id":null,"dir":"Reference","previous_headings":"","what":"A collection of data representing one state of a roleModel — roleData-class","title":"A collection of data representing one state of a roleModel — roleData-class","text":"S4 class represent roleModel state using `localComm`,`metaComm`, & `phylo`","code":""},{"path":"/reference/roleData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A collection of data representing one state of a roleModel — roleData-class","text":"","code":"roleData(localComm, metaComm, phylo)"},{"path":"/reference/roleData.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A collection of data representing one state of a roleModel — roleData-class","text":"localComm `localComm` object containing local community metaComm `metaComm` object containing meta community phylo `rolePhylo` object containing model phylogeny","code":""},{"path":"/reference/roleExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"roleExperiment - one or more models bundled collectively — roleExperiment-class","title":"roleExperiment - one or more models bundled collectively — roleExperiment-class","text":"S4 class represent self-enclosed modeling experiment intentioned set models. contains list `roleModel`objects, list `roleParams` use model, data.frame summary models, author metadata","code":""},{"path":"/reference/roleExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"roleExperiment - one or more models bundled collectively — roleExperiment-class","text":"","code":"roleExperiment(allParams)"},{"path":"/reference/roleExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"roleExperiment - one or more models bundled collectively — roleExperiment-class","text":"allParams list model params use model","code":""},{"path":"/reference/roleExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"roleExperiment - one or more models bundled collectively — roleExperiment-class","text":"ready--run `roleExperiment`","code":""},{"path":"/reference/roleExperiment.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"roleExperiment - one or more models bundled collectively — roleExperiment-class","text":"modelRuns list `roleModel`objects allParams list `roleParams` use model context named string vector keep track author metadata contains values \"author\", \"date\", \"description\", \"info\", element named respective string. model saved `writeRole` text file generated using metadata info data.frame summarizing metadata models experiment  (Need chat Andy exact intentions writing )","code":""},{"path":"/reference/roleExperiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"roleExperiment - one or more models bundled collectively — roleExperiment-class","text":"","code":"# create and run a roleExperiment that will contain three models with three different levels of dispersal"},{"path":"/reference/roleIterFuns.html","id":null,"dir":"Reference","previous_headings":"","what":"Priors of one roleModel — roleIterFuns","title":"Priors of one roleModel — roleIterFuns","text":"Priors one roleModel","code":""},{"path":"/reference/roleIterFuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Priors of one roleModel — roleIterFuns","text":"","code":"roleIterFuns(   individuals_local,   individuals_meta,   species_meta,   speciation_local,   speciation_meta,   extinction_meta,   trait_sigma,   env_sigma,   comp_sigma,   dispersal_prob,   mutation_rate,   equilib_escape,   num_basepairs,   init_type,   niter,   niterTimestep )  roleIterFuns(   individuals_local,   individuals_meta,   species_meta,   speciation_local,   speciation_meta,   extinction_meta,   trait_sigma,   env_sigma,   comp_sigma,   dispersal_prob,   mutation_rate,   equilib_escape,   num_basepairs,   init_type,   niter,   niterTimestep )"},{"path":"/reference/roleIterFuns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Priors of one roleModel — roleIterFuns","text":"parameter `init_type`, `niter`, `niterTimestep`     vector containing either one value `niter` values; `init_type`,      `niter`, `niterTimestep` can take single value (others can     take single vals ...clear )","code":""},{"path":"/reference/roleIterFuns.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Priors of one roleModel — roleIterFuns","text":"individuals_local number individuals local community individuals_meta number individuals meta community species_meta number species meta community speciation_local local speciation probability speciation_meta speciation rate meta community extinction_meta extinction rate meta community trait_sigma rate Brownian trait evolution meta community env_sigma selectivity environmental filter comp_sigma selectivity competition dispersal_prob local dispersal probability mutation_rate mutation rate equilib_escape proportion equilibrium achieved num_basepairs number basepairs init_type initialization routine; single character string either  \"oceanic_island\" \"bridge_island\" niter integer specifying number iterations niterTimestep integer specifying frequency (numbers  iterations) model state saved","code":""},{"path":"/reference/roleModel.html","id":null,"dir":"Reference","previous_headings":"","what":"A single RoLE model. — roleModel-class","title":"A single RoLE model. — roleModel-class","text":"S4 class holds RoLE eco-evolutionary process model. model first initialized using set parameters, run using parameters.","code":""},{"path":"/reference/roleModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A single RoLE model. — roleModel-class","text":"","code":"roleModel(params)"},{"path":"/reference/roleModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A single RoLE model. — roleModel-class","text":"params params use model run.","code":""},{"path":"/reference/roleModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A single RoLE model. — roleModel-class","text":"ready--run `roleModel`.","code":""},{"path":"/reference/roleModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A single RoLE model. — roleModel-class","text":"See `roleR_intro` vignette example modeling workflow.","code":""},{"path":"/reference/roleModel.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A single RoLE model. — roleModel-class","text":"modelSteps list `roleData` objects, one snapshot model recorded model ran. example, 3rd saved snapshot accessed modelSteps[[3]]. Models yet run one timestep modelSteps[[1]]. params `roleParams` object containing params use model run.","code":""},{"path":"/reference/roleModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A single RoLE model. — roleModel-class","text":"","code":"# Create a model using a default set of params, then run it. m <- roleModel(roleParams()) m <- runRole(m)"},{"path":"/reference/roleParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters of one roleModel — roleParams","title":"Parameters of one roleModel — roleParams","text":"S4 class containing params population sizes, rates processes, number iterations run, much . Parameters include population sizes, rates processes, number iterations run, much .","code":""},{"path":"/reference/roleParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters of one roleModel — roleParams","text":"","code":"roleParams(   individuals_local = 100,   individuals_meta = 1000,   species_meta = 10,   speciation_local = 0,   speciation_meta = 1,   extinction_meta = 0.8,   dispersal_prob = 0.01,   trait_sigma = 1,   env_sigma = 0,   comp_sigma = 0,   neut_delta = 1,   env_comp_delta = 0.5,   mutation_rate = 0,   equilib_escape = 0,   alpha = 1,   num_basepairs = 0,   init_type = \"oceanic_island\",   niter = 10,   niterTimestep = NULL )  roleParams(   individuals_local = 100,   individuals_meta = 1000,   species_meta = 10,   speciation_local = 0,   speciation_meta = 1,   extinction_meta = 0.8,   dispersal_prob = 0.01,   trait_sigma = 1,   env_sigma = 0,   comp_sigma = 0,   neut_delta = 1,   env_comp_delta = 0.5,   mutation_rate = 0,   equilib_escape = 0,   alpha = 1,   num_basepairs = 0,   init_type = \"oceanic_island\",   niter = 10,   niterTimestep = NULL )"},{"path":"/reference/roleParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters of one roleModel — roleParams","text":"individuals_local single numeric \"iter function\" individuals_meta single integer species_meta single integer speciation_local single numeric \"iter function\" speciation_meta single numeric extinction_meta single numeric dispersal_prob single numeric \"iter function\" trait_sigma single numeric env_sigma single numeric comp_sigma single numeric neut_delta single numeric env_comp_delta single numeric mutation_rate single numeric equilib_escape single numeric alpha single numeric \"iter function\" num_basepairs single integer init_type character vector either \"oceanic_island\" \"bridge_island\" niter integer niterTimestep integer","code":""},{"path":"/reference/roleParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameters of one roleModel — roleParams","text":"`roleParams` object","code":""},{"path":"/reference/roleParams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameters of one roleModel — roleParams","text":"Params `init_type`, `niter`, `niterTimestep`,      `mutation_rate`,`equilib_escape`,`num_basepairs` take single value.      params numeric vectors containing either one value `niter` values.      one value supplied, value used iterations model.      `niter`values supplied, different sequential value `niter` vector used iteration. `individuals_local`, `speciation_local` `dispersal_prob` unique allowed time-vary course model run.  like time-vary can supply \"iter function\" takes model iteration number returns value param take iteration model.","code":""},{"path":"/reference/roleParams.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Parameters of one roleModel — roleParams","text":"individuals_local Number individuals local community (J). Determines length raw individual-level trait, abundance, genetic data vectors returned simulations. model initialized, individuals single species metacommunity. individuals_meta Number individuals metacommunity. Used generating log series initial abundances species metacommunity. species_meta Number species metacommunity.  Determines initial size phylogeny. speciation_local Probability speciation occurring local community time step. new local species can either birth local community immigration metacommunity - `dispersal prob` param determines chance scenarios. speciation_meta rate speciation meta community. used simulation start phylogeny model run sum speciation_meta extinction_meta average lifetime phylo branches,  larger value less new individual traits deviate parent's individual trait (parent local comm) metacommunity mean (parent metacomm) extinction_meta Rate extinction metacommunity. Like speciation_meta, used initial phylogeny simulation relation trait deviation. dispersal_prob Probability dispersal (immigration) occurring metacommunity local local community time step. Every time step, either birth immigration happens, probability birth 1 minus dispersal_prob. trait_sigma Rate Brownian trait evolution metacommunity.  Determines much trait new individual deviates parent, .e. fast traits change. env_sigma Selectivity environmental filter, .e. strongly environment selects trait values good match . larger value, less chance individual survive far trait optimum (0). comp_sigma size competition kernel: strongly distance traits species  selects trait values likely survive. larger value, greater chance individual survive close trait space others neut_delta degree neutrality - 1 environmental filtering competition,  0 full competition filtering. env_comp_delta slider environmental filtering competition - 1 full filtering competition, 0 full competition filtering. mutation_rate Rate sequence mutation use genetic simulations. equilib_escape Proportion equilibrium required halt model running return alpha alpha parameter num_basepairs Number basepairs use genetic simulations. Genetic simulations currently single-locus. init_type biological model used initialize; single character string can either \"oceanic_island\", \"bridge_island\", \"bare_island.\" bridge island model initial individuals local community arriving land bridge, oceanic bridge populated single dispersal event. Thus, oceanic island models, individuals SINGLE species sampled proportional meta community species abundances,  bridge island models, individuals sampled MANY species proportional abundances. bare island model related oceanic island model, instead starting \"individuals_local\" individuals sole sampled species, 1 individual  species appears rest space filled placeholder \"rocks\" representing unfilled space. niter integer specifying number time steps model run. niterTimestep integer specifying frequency (numbers  iterations) model state snapshot saved model's model steps object.","code":""},{"path":"/reference/roleParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameters of one roleModel — roleParams","text":"","code":"# Create a set of params params <- roleParams(individuals_local = 100, individuals_meta = 1000, species_meta = 10, speciation_local = 0.5,  speciation_meta = 1, extinction_meta = 0.8, env_sigma = 0.5, trait_sigma=1,comp_sigma = 0.1, dispersal_prob = 0.1, mutation_rate = 0.01, equilib_escape = 1, num_basepairs = 250, init_type = 'oceanic_island', niter = 2, niterTimestep = 2)  # Use it to create a roleModel model <- roleModel(params)  # create a default set of params but change the number of individuals in the local p <- roleParams(individuals_local=500) # create a new set of params but randomly deviating the speciation rate using an \"iter function\" spfun <- function(i){rnorm(1,mean=0.1,sd=0.01)} p <- roleParams(speciation_local=spfun)"},{"path":"/reference/rolePhylo-class.html","id":null,"dir":"Reference","previous_headings":"","what":"RoLE phylogeny — rolePhylo-class","title":"RoLE phylogeny — rolePhylo-class","text":"S4 class specify phylogeny way can easily     evolved simulation","code":""},{"path":"/reference/rolePhylo-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"RoLE phylogeny — rolePhylo-class","text":"n number tips e edge matrix; two columns give ancestor, child pair l numeric vector edge lengths (units time steps = 1/J generations) alive vector indicating whether tips extant tipNames vector tip names scale time scale translation years","code":""},{"path":"/reference/rolePhylo.html","id":null,"dir":"Reference","previous_headings":"","what":"A phylogeny of all the species of a `roleData` — rolePhylo-class","title":"A phylogeny of all the species of a `roleData` — rolePhylo-class","text":"S4 class specify phylogeny purpose RoLE model","code":""},{"path":"/reference/rolePhylo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A phylogeny of all the species of a `roleData` — rolePhylo-class","text":"","code":"rolePhylo(n, e, l, alive, tipNames, scale)"},{"path":"/reference/rolePhylo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A phylogeny of all the species of a `roleData` — rolePhylo-class","text":"n  e  l  alive  tipNames","code":""},{"path":"/reference/rolePhylo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A phylogeny of all the species of a `roleData` — rolePhylo-class","text":"`rolePhylo` object","code":""},{"path":"/reference/rolePhylo.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A phylogeny of all the species of a `roleData` — rolePhylo-class","text":"n number tips phylogeny e numeric edge matrix phylogeny row contains ancestor-child pair 1st column ancestor 2nd child l numeric vector edge lengths  units l time steps (iterations) model time step unit equal 1/J generations J number individuals local community alive logical vector indicating whether tips extant tipNames character vector names tip scale single numeric value time scale translation years","code":""},{"path":"/reference/rolePriors.html","id":null,"dir":"Reference","previous_headings":"","what":"Priors of one roleModel — rolePriors","title":"Priors of one roleModel — rolePriors","text":"Priors one roleModel","code":""},{"path":"/reference/rolePriors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Priors of one roleModel — rolePriors","text":"","code":"rolePriors(   individuals_local,   individuals_meta,   species_meta,   speciation_local,   speciation_meta,   extinction_meta,   trait_sigma,   env_sigma,   comp_sigma,   dispersal_prob,   mutation_rate,   equilib_escape,   num_basepairs,   init_type,   niter,   niterTimestep )  rolePriors(   individuals_local,   individuals_meta,   species_meta,   speciation_local,   speciation_meta,   extinction_meta,   trait_sigma,   env_sigma,   comp_sigma,   dispersal_prob,   mutation_rate,   equilib_escape,   num_basepairs,   init_type,   niter,   niterTimestep )"},{"path":"/reference/rolePriors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Priors of one roleModel — rolePriors","text":"parameter `init_type`, `niter`, `niterTimestep`     vector containing either one value `niter` values; `init_type`,      `niter`, `niterTimestep` can take single value (others can     take single vals ...clear )","code":""},{"path":"/reference/rolePriors.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Priors of one roleModel — rolePriors","text":"individuals_local number individuals local community individuals_meta number individuals meta community species_meta number species meta community speciation_local local speciation probability speciation_meta speciation rate meta community extinction_meta extinction rate meta community trait_sigma rate Brownian trait evolution meta community env_sigma selectivity environmental filter comp_sigma selectivity competition dispersal_prob local dispersal probability mutation_rate mutation rate equilib_escape proportion equilibrium achieved num_basepairs number basepairs init_type initialization routine; single character string either  \"oceanic_island\" \"bridge_island\" niter integer specifying number iterations niterTimestep integer specifying frequency (numbers  iterations) model state saved","code":""},{"path":"/reference/runRoLE.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a `roleModel` or `roleExperiment` — runRole","title":"Run a `roleModel` or `roleExperiment` — runRole","text":"Iterate RoLE object completion using parameters","code":""},{"path":"/reference/runRoLE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a `roleModel` or `roleExperiment` — runRole","text":"","code":"runRole(x, cores = 1, print = F)"},{"path":"/reference/runRoLE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a `roleModel` or `roleExperiment` — runRole","text":"x `roleModel` `roleModel` object run print whether print step information model runs","code":""},{"path":"/reference/runRoLE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a `roleModel` or `roleExperiment` — runRole","text":"`roleModel` `roleExperiment` run completion","code":""},{"path":[]},{"path":"/reference/setContext.html","id":null,"dir":"Reference","previous_headings":"","what":"Set context metadata to an experiment — setContext","title":"Set context metadata to an experiment — setContext","text":"Set context metadata experiment","code":""},{"path":"/reference/setContext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set context metadata to an experiment — setContext","text":"","code":"setContext(x, author, datestring, description)  # S4 method for roleExperiment setContext(x, author, datestring, description)"},{"path":"/reference/setContext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set context metadata to an experiment — setContext","text":"x `roleExperiment` object set context metadata . author string containing author name RoLE experiment. datestring string containing date RoLE experiment run description string containing short description RoLE experiment's purpose intent","code":""},{"path":"/reference/setContext.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set context metadata to an experiment — setContext","text":"argument besides `x` single string.","code":""},{"path":"/reference/setExpMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Set metadata from an experiment. — setExpMetadata","title":"Set metadata from an experiment. — setExpMetadata","text":"Set metadata experiment.","code":""},{"path":"/reference/setExpMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set metadata from an experiment. — setExpMetadata","text":"","code":"setExpMetadata(x, author, datestring, description)  # S4 method for roleExperiment setExpMetadata(x, author, datestring, description)"},{"path":"/reference/setExpMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set metadata from an experiment. — setExpMetadata","text":"x `roleExperiment` object set metadata . author author RoLE experiment. datestring date RoLE experiment run. description short description RoLE experiment.","code":""},{"path":"/reference/setExpMetadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set metadata from an experiment. — setExpMetadata","text":"argument besides `x` single string.","code":""},{"path":"/reference/simGen.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate genetic variation — simGen","title":"Simulate genetic variation — simGen","text":"Calls msprime API generate genetic data","code":""},{"path":"/reference/simGen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate genetic variation — simGen","text":"","code":"simGen(   localPop,   metaPop,   localSamp,   mutationRate,   immRate,   maxTime,   bp,   ploidy,   msp )"},{"path":"/reference/simGen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate genetic variation — simGen","text":"localSamp number local individuals bp number basepairs msp R object wrapping msprime module (returned reticualte::import)","code":""},{"path":"/reference/simulateSpeciesGenDiv.html","id":null,"dir":"Reference","previous_headings":"","what":"using msprime simulation, add genetic diversities to a roleExperiment or roleModel for each species — simulateSpeciesGenDiv","title":"using msprime simulation, add genetic diversities to a roleExperiment or roleModel for each species — simulateSpeciesGenDiv","text":"using msprime simulation, add genetic diversities roleExperiment roleModel species","code":""},{"path":"/reference/simulateSpeciesGenDiv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"using msprime simulation, add genetic diversities to a roleExperiment or roleModel for each species — simulateSpeciesGenDiv","text":"","code":"simulateSpeciesGenDiv(model)"},{"path":"/reference/simulateSpeciesGenDiv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"using msprime simulation, add genetic diversities to a roleExperiment or roleModel for each species — simulateSpeciesGenDiv","text":"x roleModel roleExperiment object get stat ","code":""},{"path":"/reference/simulateSpeciesGenDiv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"using msprime simulation, add genetic diversities to a roleExperiment or roleModel for each species — simulateSpeciesGenDiv","text":"dataframe containing timeseries","code":""},{"path":"/reference/untbParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper around roleParams to create a ","title":"Wrapper around roleParams to create a ","text":"arguments relevant UNTB neutral model included","code":""},{"path":"/reference/untbParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper around roleParams to create a ","text":"","code":"untbParams(   individuals_local,   individuals_meta,   species_meta,   speciation,   dispersal_prob,   init_type,   niter,   niterTimestep )"},{"path":"/reference/untbParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper around roleParams to create a ","text":"`roleParams` object","code":""},{"path":"/reference/writeRoLE.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a RoLE model, experiment, or params — writeRole","title":"Write a RoLE model, experiment, or params — writeRole","text":"Write RoLE model, experiment, params","code":""},{"path":"/reference/writeRoLE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a RoLE model, experiment, or params — writeRole","text":"","code":"writeRole(x, dir, filename, save_txt)"},{"path":"/reference/writeRoLE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a RoLE model, experiment, or params — writeRole","text":"x object write dir directory (path) write object filename name file save File called *filename*.roleexperiment","code":""}]
