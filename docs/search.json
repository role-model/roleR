[{"path":"/articles/roleR_intro.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"roleR_intro","text":"","code":"library(roleR) set.seed(1)"},{"path":"/articles/roleR_intro.html","id":"highlevel-overview","dir":"Articles","previous_headings":"","what":"Highlevel overview","title":"roleR_intro","text":"object class roleExperiment contains multiple different model runs parameters used model runs. parameters held object class roleParams model runs list, element object class roleModel.","code":""},{"path":"/articles/roleR_intro.html","id":"dive-right-in","dir":"Articles","previous_headings":"","what":"Dive right in!","title":"roleR_intro","text":"","code":"library(roleR)  # set-up parameters p <- roleParams(   individuals_local = 1000,   individuals_meta = 10000,   species_meta = 50,   speciation_local = 0.5,   speciation_meta = 1,   extinction_meta = 0.8,   trait_sigma = 2,   env_sigma = 1,   comp_sigma = 1,   dispersal_prob = 0.5,   mutation_rate = 0.01,   equilib_escape = 1,   num_basepairs = 250,   init_type = 'oceanic_island',   niter = 1000,   niterTimestep = 100 )  # initialize the model m <- roleModel(p)  # run the model m <- iterModel(m)  # coerce to an experiment e <- as(m, 'roleExperiment')  # experiments have a nice data.frame summary of all the params e@experimentMeta  # we can extract summary statistics; note: rows of summary statistic # output match rows of `e@experimentMeta` getSumStats(e, list(rich = richness, hill = hillAbund))"},{"path":"/articles/roleR_use_cases.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"roleR Use Cases","text":"","code":"#devtools::install_github(\"role-model/roleR\",dependencies=TRUE)  library(roleR) library(ggplot2) p <- roleParams(individuals_local = 100, individuals_meta = 1000,                          species_meta = 50, speciation_local = 0.05,                           speciation_meta = 0.05, extinction_meta = 0.05, env_sigma = 0.5,                          trait_sigma=1,comp_sigma = 0.5, dispersal_prob = 0.1, mutation_rate = 0.01,                          equilib_escape = 1, num_basepairs = 250,                          init_type = 'oceanic_island', niter = 1000, niterTimestep = 100) model <- runRoLE(roleModel(p)) stats <- getSumStats(model,funs=list(rich=richness)) #TODO add default where all existing sumstats are added ggplot(stats, aes(iteration, rich)) +      geom_line()"},{"path":"/articles/roleR_use_cases.html","id":"parameter-creation","dir":"Articles","previous_headings":"","what":"Parameter Creation","title":"roleR Use Cases","text":"Create set parameters specifying every one Create set params per Unified Neutral Theory Biodiversity (UNTB). creates “UNTB-flavored” RoLE model See roleParams documentation descriptions available parameters Group Question: default parameters exist simply p <- roleParams() creates valid params? defaults ?","code":"p <- roleParams(individuals_local = 100, individuals_meta = 1000,                          species_meta = 50, speciation_local = 0.05,                           speciation_meta = 0.05, extinction_meta = 0.05, env_sigma = 0.5,                          trait_sigma=1,comp_sigma = 0.5, dispersal_prob = 0.1, mutation_rate = 0.01,                          equilib_escape = 1, num_basepairs = 250,                          init_type = 'oceanic_island', niter = 1000, niterTimestep = 100) p_untb <- untbParams(individuals_local = 100, individuals_meta = 1000,                          species_meta = 50,                          speciation = 0.2,                          dispersal_prob = 0.1, init_type = 'oceanic_island',                         niter = 30000, niterTimestep = 1000)"},{"path":"/articles/roleR_use_cases.html","id":"model-experiment-creation-running","dir":"Articles","previous_headings":"","what":"Model & Experiment Creation & Running","title":"roleR Use Cases","text":"Create model (yet run) using params, run Create experiment (yet run) containing two models created using sets params, run . Experiment running can parallelized Windows, Mac, & Linux specifying number cores use. run experiment, runs every model within . Experiments intended encapsulate one hypotheses comparison multiple varying models contained within Group Question: encapsulating multiple models experiments useful, rather deal models individually use cases?","code":"model <- roleModel(p) model <- runRoLE(model) exp <- roleExperiment(list(p,p_untb)) #library(parallel) #exp <- runRoLE(exp,cores=2)"},{"path":"/articles/roleR_use_cases.html","id":"extracting-data-from-models","dir":"Articles","previous_headings":"","what":"Extracting Data From Models","title":"roleR Use Cases","text":"Get summary stats time single model, row different saved iteration state. Available raw stats rawAbundance, rawSpAbundance, rawTraits, rawGenDiv, rawBranchLengths, rawApePhylo. Available transformed stats hillAbund, hillGenetic, hillTrait, hillPhylo, richness.","code":"stats <- getSumStats(model, list(rich = richness,hill_abund=hillAbund)) stats ##    rich hill_abund_1 hill_abund_2 hill_abund_3 hill_abund_4 iteration ## 1     1     1.000000     1.000000     1.000000     1.000000         0 ## 2    15     2.878159     1.628664     1.451319     1.392741       100 ## 3    20     4.513310     2.124947     1.782460     1.672288       200 ## 4    13     3.411287     1.893222     1.635853     1.549570       300 ## 5    20     6.211256     2.927400     2.318071     2.115546       400 ## 6    24     8.899449     4.108463     3.081785     2.734310       500 ## 7    21     7.943058     3.903201     2.980974     2.657831       600 ## 8    19     6.998104     3.706449     2.887642     2.585832       700 ## 9    19     7.889036     3.937008     2.988072     2.659203       800 ## 10   22    10.972850     5.611672     4.056069     3.504531       900 ## 11   20    10.883219     6.337136     4.693853     4.035401      1000"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Rominger. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rominger , Idec J, Diaz R (2023). roleR: Rules Life Engine. R package version 0.1.0.","code":"@Manual{,   title = {roleR: Rules of Life Engine},   author = {Andrew Rominger and Jacob Idec and Renata Diaz},   year = {2023},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"roler","dir":"","previous_headings":"","what":"Rules of Life Engine","title":"Rules of Life Engine","text":"R package implementing RoLE model","code":""},{"path":"/reference/createPredModel.html","id":null,"dir":"Reference","previous_headings":"","what":"createPredModel — createPredModel","title":"createPredModel — createPredModel","text":"create random forest model predict parameter value using summary statistics","code":""},{"path":"/reference/createPredModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"createPredModel — createPredModel","text":"","code":"createPredModel(exp, paramName)"},{"path":"/reference/createPredModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"createPredModel — createPredModel","text":"exp roleExperiment use training set paramName parameter predict","code":""},{"path":"/reference/div-sumStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Hill number summary statistics for `roleData` objects — hillAbund","title":"Hill number summary statistics for `roleData` objects — hillAbund","text":"funcitons calculate numbers. naming convention      indicates type hill number function caculates; e.g.      `hillAbund` calcualtes abundance-based Hill numbers, `hillTrait`      calculates trait-based Hill numbers","code":""},{"path":"/reference/div-sumStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hill number summary statistics for `roleData` objects — hillAbund","text":"","code":"hillAbund(x, q = 1:4, ...)  hillGenetic(x, q = 1:4, ...)  hillTrait(x, q = 1:4, ...)  hillPhylo(x, q = 1:4, ...)  richness(x, ...)"},{"path":"/reference/div-sumStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hill number summary statistics for `roleData` objects — hillAbund","text":"x `roleData` object calculate Hill numbers richness q Hill number exponents ... additional parameters, ignored","code":""},{"path":"/reference/getFinalState.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the final state of a model run — getFinalState","title":"Get the final state of a model run — getFinalState","text":"gets final state model either `roleExperiment`      `roleModel`","code":""},{"path":"/reference/getFinalState.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the final state of a model run — getFinalState","text":"","code":"getFinalState(x, modID, ...)"},{"path":"/reference/getFinalState.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the final state of a model run — getFinalState","text":"x object retrieve state modID optional argument retrieve state specific model(s) `roleExperiment` object; can vector unique IDs","code":""},{"path":"/reference/getFinalState.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the final state of a model run — getFinalState","text":"`modID` supplied `x` `roleExperiment`      list `roleData` objects model run returned","code":""},{"path":"/reference/getSumStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get summary statistics for RoLE objects — getSumStats","title":"Get summary statistics for RoLE objects — getSumStats","text":"Applies different summary stats functions `roleExperiment`,     `roleModel`, `roleData`","code":""},{"path":"/reference/getSumStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get summary statistics for RoLE objects — getSumStats","text":"","code":"getSumStats(x, funs, moreArgs, ...)  # S4 method for roleData getSumStats(x, funs, moreArgs)  # S4 method for roleModel getSumStats(x, funs, moreArgs)  # S4 method for roleExperiment getSumStats(x, funs, moreArgs)"},{"path":"/reference/getSumStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get summary statistics for RoLE objects — getSumStats","text":"x object calculate sum stats across funs named list function calculate sum stats; can  named list single function many functions, must  named list functions moreArgs optional named list additional arguments pass functions listed `funs`; given, list names must match  `funs`. Note: names `funs` need appear `moreArgs` ... ignored","code":""},{"path":"/reference/getSumStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get summary statistics for RoLE objects — getSumStats","text":"users can define functions, long work     object class `roleData`","code":""},{"path":"/reference/getTimeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a timeseries from a roleModel or roleExperiment as a dataframe — getTimeseries","title":"Get a timeseries from a roleModel or roleExperiment as a dataframe — getTimeseries","text":"Get timeseries roleModel roleExperiment dataframe","code":""},{"path":"/reference/getTimeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a timeseries from a roleModel or roleExperiment as a dataframe — getTimeseries","text":"","code":"getTimeseries(x, ...)"},{"path":"/reference/getTimeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a timeseries from a roleModel or roleExperiment as a dataframe — getTimeseries","text":"x roleModel roleExperiment object get timeseries fun function applies roleData objects gather data  apply applies fun across list roleData roleModel lastColAsTitle specify use last column gathered fun column names output dataframe","code":""},{"path":"/reference/getTimeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a timeseries from a roleModel or roleExperiment as a dataframe — getTimeseries","text":"dataframe containing timeseries","code":""},{"path":"/reference/localComm.html","id":null,"dir":"Reference","previous_headings":"","what":"Local community — localComm-class","title":"Local community — localComm-class","text":"S4 class specify state local community","code":""},{"path":"/reference/localComm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local community — localComm-class","text":"","code":"localComm(indSpecies, indTrait, indSeqs, spGenDiv)"},{"path":"/reference/localComm.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Local community — localComm-class","text":"indSpecies numeric vector species IDs individual example indSpecies[1] ID species individual 1 indTrait numeric vector trait values individual indSeqs character vector gene sequences individual spGenDiv numeric vector genetic diversities species spTrait numeric vector mean trait value species spAbund numeric vector abundance (number individuals) species spAbundHarmMean numeric vector harmonic mean species abundances Equivalent n / reciprocal sum abundances since last emergence n number steps reciprocal sum Used genetic simulation roleR spLastOriginStep numeric vector last origin step species last origin step last step new species appeared local community (either totally new local extinction) Used genetic simulation roleR spExtinctionStep numeric vector last extinction step species Used genetic simulation roleR","code":""},{"path":"/reference/metaComm.html","id":null,"dir":"Reference","previous_headings":"","what":"Meta community — metaComm-class","title":"Meta community — metaComm-class","text":"S4 class specify state meta community","code":""},{"path":"/reference/metaComm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meta community — metaComm-class","text":"","code":"metaComm(spAbund, spTrait)"},{"path":"/reference/metaComm.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Meta community — metaComm-class","text":"spAbund numeric vector relative abundances species meta community example spAbundTrt[1] relative abundance species 1 spTrait numeric vector trait values species meta community","code":""},{"path":"/reference/raw-sumStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get raw data from `roleData` objects — rawAbundance","title":"Get raw data from `roleData` objects — rawAbundance","text":"Gets raw data","code":""},{"path":"/reference/raw-sumStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get raw data from `roleData` objects — rawAbundance","text":"","code":"rawAbundance(x, ...)  rawSppID(x, ...)  rawTraits(x, ...)  rawGenDiv(x, ...)  rawSeqs(x, ...)  rawBranchLengths(x, ...)  rawApePhylo(x, ...)"},{"path":"/reference/raw-sumStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get raw data from `roleData` objects — rawAbundance","text":"x `roleData` object get raw data ... additional parameters, ignored","code":""},{"path":"/reference/raw-sumStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get raw data from `roleData` objects — rawAbundance","text":"list one element, inside one element vector     raw data","code":""},{"path":"/reference/raw-sumStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get raw data from `roleData` objects — rawAbundance","text":"functions return list length one (summary statistics      inside list) summary stats variable     length. distinct summary stat functions     always return fixed length value.  using raw summary stat      functions `getSumStats` returned list column","code":""},{"path":"/reference/roleData.html","id":null,"dir":"Reference","previous_headings":"","what":"A set of data representing one step or state of a roleModel — roleData-class","title":"A set of data representing one step or state of a roleModel — roleData-class","text":"Contains community states, phylo state, summmary stats","code":""},{"path":"/reference/roleData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A set of data representing one step or state of a roleModel — roleData-class","text":"","code":"roleData(localComm, metaComm, phylo, iterNum)"},{"path":"/reference/roleData.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A set of data representing one step or state of a roleModel — roleData-class","text":"localComm object class localComm metaComm object class metaComm phylo object class rolePhylo stats object class data-frame - 1st col contains param names, 2nd col contains numeric entropies used compute hill statistics,  3rd col contains hill statistic values","code":""},{"path":"/reference/roleExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"A RoLE experiment: one or more models used collectively to ask a question or probe a hypothesis — roleExperiment-class","title":"A RoLE experiment: one or more models used collectively to ask a question or probe a hypothesis — roleExperiment-class","text":"S4 class represent complete self-enclosed experiment (     model run set runs associated meta data). Contains one      `roleModel` runs `roleParams` used generate runs","code":""},{"path":"/reference/roleExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A RoLE experiment: one or more models used collectively to ask a question or probe a hypothesis — roleExperiment-class","text":"","code":"roleExperiment(allParams)"},{"path":"/reference/roleExperiment.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A RoLE experiment: one or more models used collectively to ask a question or probe a hypothesis — roleExperiment-class","text":"auxMeta named string vector author etc. experimentMeta data.frame model metadata modelRuns list `roleData` objects containing outputs allParams list `roleParams` objects containing input params  run","code":""},{"path":[]},{"path":"/reference/roleIterFuns.html","id":null,"dir":"Reference","previous_headings":"","what":"Priors of one roleModel — roleIterFuns","title":"Priors of one roleModel — roleIterFuns","text":"Priors one roleModel","code":""},{"path":"/reference/roleIterFuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Priors of one roleModel — roleIterFuns","text":"","code":"roleIterFuns(   individuals_local,   individuals_meta,   species_meta,   speciation_local,   speciation_meta,   extinction_meta,   trait_sigma,   env_sigma,   comp_sigma,   dispersal_prob,   mutation_rate,   equilib_escape,   num_basepairs,   init_type,   niter,   niterTimestep )  roleIterFuns(   individuals_local,   individuals_meta,   species_meta,   speciation_local,   speciation_meta,   extinction_meta,   trait_sigma,   env_sigma,   comp_sigma,   dispersal_prob,   mutation_rate,   equilib_escape,   num_basepairs,   init_type,   niter,   niterTimestep )"},{"path":"/reference/roleIterFuns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Priors of one roleModel — roleIterFuns","text":"parameter `init_type`, `niter`, `niterTimestep`     vector containing either one value `niter` values; `init_type`,      `niter`, `niterTimestep` can take single value (others can     take single vals ...clear )","code":""},{"path":"/reference/roleIterFuns.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Priors of one roleModel — roleIterFuns","text":"individuals_local number individuals local community individuals_meta number individuals meta community species_meta number species meta community speciation_local local speciation probability speciation_meta speciation rate meta community extinction_meta extinction rate meta community trait_sigma rate Brownian trait evolution meta community env_sigma selectivity environmental filter comp_sigma selectivity competition dispersal_prob local dispersal probability mutation_rate mutation rate equilib_escape proportion equilibrium achieved num_basepairs number basepairs init_type initialization routine; single character string either  \"oceanic_island\" \"bridge_island\" niter integer specifying number iterations niterTimestep integer specifying frequency (numbers  iterations) model state saved","code":""},{"path":"/reference/roleModel.html","id":null,"dir":"Reference","previous_headings":"","what":"One run of the RoLE model — roleModel-class","title":"One run of the RoLE model — roleModel-class","text":"S4 class hold one model run RoLE model","code":""},{"path":"/reference/roleModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One run of the RoLE model — roleModel-class","text":"","code":"roleModel(params)"},{"path":"/reference/roleModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"One run of the RoLE model — roleModel-class","text":"model first initialized using set params, iterated using iterModel(modeL) roleExperiments consist many roleModels different parameters","code":""},{"path":"/reference/roleModel.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"One run of the RoLE model — roleModel-class","text":"modelSteps list roleData objects, one recorded time step `niterTimestep` param defines recording interval params `roleParams` object defining model params","code":""},{"path":[]},{"path":"/reference/roleParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters of one roleModel — roleParams","title":"Parameters of one roleModel — roleParams","text":"S4 class containing params population sizes, rates processes, number iterations run, ","code":""},{"path":"/reference/roleParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters of one roleModel — roleParams","text":"","code":"roleParams(   individuals_local,   individuals_meta,   species_meta,   speciation_local,   speciation_meta,   extinction_meta,   trait_sigma,   env_sigma,   comp_sigma,   neut_delta = NA,   env_comp_delta = NA,   dispersal_prob,   mutation_rate = NA,   equilib_escape = NA,   alpha = NA,   num_basepairs = NA,   init_type,   niter,   niterTimestep )  roleParams(   individuals_local,   individuals_meta,   species_meta,   speciation_local,   speciation_meta,   extinction_meta,   trait_sigma,   env_sigma,   comp_sigma,   neut_delta = NA,   env_comp_delta = NA,   dispersal_prob,   mutation_rate = NA,   equilib_escape = NA,   alpha = NA,   num_basepairs = NA,   init_type,   niter,   niterTimestep )"},{"path":"/reference/roleParams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameters of one roleModel — roleParams","text":"Params `init_type`, `niter`, `niterTimestep`,      `mutation_rate`,`equilib_escape`,`num_basepairs` take single value.      params numeric vectors containing either one value `niter` values.      one value value used iterations model.      `niter`values different sequential value used iteration","code":""},{"path":"/reference/roleParams.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Parameters of one roleModel — roleParams","text":"individuals_local number individuals local community individuals_meta number individuals meta community species_meta number species meta community speciation_local local speciation probability speciation_meta speciation rate meta community extinction_meta extinction rate meta community trait_sigma rate Brownian trait evolution meta community env_sigma selectivity environmental filter # might need another parameter death rate face neutrality comp_sigma selectivity competition dispersal_prob local dispersal probability mutation_rate mutation rate equilib_escape proportion equilibrium achieved num_basepairs number basepairs init_type initialization routine; single character string either  \"oceanic_island\" \"bridge_island\" niter integer specifying number iterations niterTimestep integer specifying frequency (numbers  iterations) model state saved","code":""},{"path":[]},{"path":"/reference/rolePhylo-class.html","id":null,"dir":"Reference","previous_headings":"","what":"RoLE phylogeny — rolePhylo-class","title":"RoLE phylogeny — rolePhylo-class","text":"S4 class specify phylogeny way can easily     evolved simulation","code":""},{"path":"/reference/rolePhylo-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"RoLE phylogeny — rolePhylo-class","text":"n number tips e edge matrix; two columns give ancestor, child pair l numeric vector edge lengths (units time steps = 1/J generations) alive vector indicating whether tips extant tipNames vector tip names scale time scale translation years","code":""},{"path":"/reference/rolePhylo.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a RoLE model phylogeny — rolePhylo","title":"Specify a RoLE model phylogeny — rolePhylo","text":"Specify RoLE model phylogeny","code":""},{"path":"/reference/rolePhylo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a RoLE model phylogeny — rolePhylo","text":"","code":"rolePhylo(n, e, l, alive, tipNames, scale)"},{"path":"/reference/rolePhylo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a RoLE model phylogeny — rolePhylo","text":"n number tips e edge matrix; two columns give ancestor, child pair l numeric vector edge lengths (units time steps = 1/J generations) alive vector indicating whether tips extant tipNames vector tip names scale time scale translation years","code":""},{"path":"/reference/rolePriors.html","id":null,"dir":"Reference","previous_headings":"","what":"Priors of one roleModel — rolePriors","title":"Priors of one roleModel — rolePriors","text":"Priors one roleModel","code":""},{"path":"/reference/rolePriors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Priors of one roleModel — rolePriors","text":"","code":"rolePriors(   individuals_local,   individuals_meta,   species_meta,   speciation_local,   speciation_meta,   extinction_meta,   trait_sigma,   env_sigma,   comp_sigma,   dispersal_prob,   mutation_rate,   equilib_escape,   num_basepairs,   init_type,   niter,   niterTimestep )  rolePriors(   individuals_local,   individuals_meta,   species_meta,   speciation_local,   speciation_meta,   extinction_meta,   trait_sigma,   env_sigma,   comp_sigma,   dispersal_prob,   mutation_rate,   equilib_escape,   num_basepairs,   init_type,   niter,   niterTimestep )"},{"path":"/reference/rolePriors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Priors of one roleModel — rolePriors","text":"parameter `init_type`, `niter`, `niterTimestep`     vector containing either one value `niter` values; `init_type`,      `niter`, `niterTimestep` can take single value (others can     take single vals ...clear )","code":""},{"path":"/reference/rolePriors.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Priors of one roleModel — rolePriors","text":"individuals_local number individuals local community individuals_meta number individuals meta community species_meta number species meta community speciation_local local speciation probability speciation_meta speciation rate meta community extinction_meta extinction rate meta community trait_sigma rate Brownian trait evolution meta community env_sigma selectivity environmental filter comp_sigma selectivity competition dispersal_prob local dispersal probability mutation_rate mutation rate equilib_escape proportion equilibrium achieved num_basepairs number basepairs init_type initialization routine; single character string either  \"oceanic_island\" \"bridge_island\" niter integer specifying number iterations niterTimestep integer specifying frequency (numbers  iterations) model state saved","code":""},{"path":"/reference/runRoLE.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a roleModel or roleExperiment object — runRoLE","title":"Run a roleModel or roleExperiment object — runRoLE","text":"Return RoLE object run completion using params contained within ","code":""},{"path":"/reference/runRoLE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a roleModel or roleExperiment object — runRoLE","text":"","code":"runRoLE(x, cores = 1, print = F)"},{"path":"/reference/runRoLE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a roleModel or roleExperiment object — runRoLE","text":"x `roleModel` `roleExperiment` object run print whether print step information model runs","code":""},{"path":"/reference/runRoLE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a roleModel or roleExperiment object — runRoLE","text":"run `roleModel` `roleExperiment`","code":""},{"path":[]},{"path":"/reference/setExpMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Set metadata from an experiment — setExpMetadata","title":"Set metadata from an experiment — setExpMetadata","text":"Set metadata experiment","code":""},{"path":"/reference/setExpMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set metadata from an experiment — setExpMetadata","text":"","code":"setExpMetadata(x, author, datestring, description)  # S4 method for roleExperiment setExpMetadata(x, author, datestring, description)"},{"path":"/reference/setExpMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set metadata from an experiment — setExpMetadata","text":"x object set metadata ","code":""},{"path":"/reference/simGen.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate genetic variation — simGen","title":"Simulate genetic variation — simGen","text":"Calls msprime API generate genetic data","code":""},{"path":"/reference/simGen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate genetic variation — simGen","text":"","code":"simGen(   localPop,   metaPop,   localSamp,   mutationRate,   immRate,   maxTime,   bp,   ploidy,   msp )"},{"path":"/reference/simGen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate genetic variation — simGen","text":"localSamp number local individuals bp number basepairs msp R object wrapping msprime module (returned reticualte::import)","code":""},{"path":"/reference/simulateSpeciesGenDiv.html","id":null,"dir":"Reference","previous_headings":"","what":"using msprime simulation, add genetic diversities to a roleExperiment or roleModel for each species — simulateSpeciesGenDiv","title":"using msprime simulation, add genetic diversities to a roleExperiment or roleModel for each species — simulateSpeciesGenDiv","text":"using msprime simulation, add genetic diversities roleExperiment roleModel species","code":""},{"path":"/reference/simulateSpeciesGenDiv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"using msprime simulation, add genetic diversities to a roleExperiment or roleModel for each species — simulateSpeciesGenDiv","text":"","code":"simulateSpeciesGenDiv(model)"},{"path":"/reference/simulateSpeciesGenDiv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"using msprime simulation, add genetic diversities to a roleExperiment or roleModel for each species — simulateSpeciesGenDiv","text":"x roleModel roleExperiment object get stat ","code":""},{"path":"/reference/simulateSpeciesGenDiv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"using msprime simulation, add genetic diversities to a roleExperiment or roleModel for each species — simulateSpeciesGenDiv","text":"dataframe containing timeseries","code":""},{"path":"/reference/writeRoLE.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a RoLE model, experiment, or params — writeRoLE","title":"Write a RoLE model, experiment, or params — writeRoLE","text":"Write RoLE model, experiment, params","code":""},{"path":"/reference/writeRoLE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a RoLE model, experiment, or params — writeRoLE","text":"","code":"writeRoLE(x, dir, filename, save_txt)  # S4 method for roleExperiment writeRoLE(x, dir, filename, save_txt)"},{"path":"/reference/writeRoLE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a RoLE model, experiment, or params — writeRoLE","text":"x object write dir directory (path) write object filename name file save File called *filename*.roleexperiment","code":""}]
