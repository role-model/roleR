[{"path":"/articles/roleR_intro.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"roleR_intro","text":"","code":"library(roleR) set.seed(1)"},{"path":"/articles/roleR_intro.html","id":"highlevel-overview","dir":"Articles","previous_headings":"","what":"Highlevel overview","title":"roleR_intro","text":"object class roleExperiment contains multiple different model runs parameters used model runs. parameters held object class roleParams model runs list, element object class roleModel.","code":""},{"path":"/articles/roleR_intro.html","id":"dive-right-in","dir":"Articles","previous_headings":"","what":"Dive right in!","title":"roleR_intro","text":"","code":"library(roleR)  # set-up parameters p <- roleParams(   individuals_local = 1000,   individuals_meta = 10000,   species_meta = 50,   speciation_local = 0.5,   speciation_meta = 1,   extinction_meta = 0.8,   trait_sigma = 2,   env_sigma = 1,   comp_sigma = 1,   dispersal_prob = 0.5,   mutation_rate = 0.01,   equilib_escape = 1,   num_basepairs = 250,   init_type = 'oceanic_island',   niter = 1000,   niterTimestep = 100 )  # initialize the model m <- roleModel(p)  # run the model m <- iterModel(m)  # coerce to an experiment e <- as(m, 'roleExperiment')  # experiments have a nice data.frame summary of all the params e@experimentMeta  # we can extract summary statistics; note: rows of summary statistic # output match rows of `e@experimentMeta` getSumStats(e, list(rich = richness, hill = hillAbund))"},{"path":"/articles/roleR_use_cases.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"roleR Use Cases","text":"Install GitHub Run model plot species richness time","code":"# devtools::install_github(\"role-model/roleR\")  library(roleR) library(ggplot2) p <- roleParams(     individuals_local = 100,     individuals_meta = 1000,     species_meta = 50,     speciation_local = 0.05,     speciation_meta = 0.05,     extinction_meta = 0.05,     env_sigma = 0.5,     trait_sigma = 1,     comp_sigma = 0.5,     dispersal_prob = 0.1,     mutation_rate = 0.01,     equilib_escape = 1,     num_basepairs = 250,     init_type = 'oceanic_island',     niter = 1000,     niterTimestep = 100 ) model <- runRole(roleModel(p)) stats <-     getSumStats(model, funs = list(rich = richness)) #TODO add default where all existing sumstats are added ggplot(stats, aes(iteration, rich)) +     geom_line()"},{"path":"/articles/roleR_use_cases.html","id":"parameter-creation","dir":"Articles","previous_headings":"","what":"Parameter Creation","title":"roleR Use Cases","text":"Create set parameters specifying every one Create set params per Unified Neutral Theory Biodiversity (UNTB). creates “UNTB-flavored” RoLE model See roleParams documentation descriptions available parameters Group Question: default parameters exist simply p <- roleParams() creates valid params? defaults ?","code":"p <- roleParams(individuals_local = 100, individuals_meta = 1000,                          species_meta = 50, speciation_local = 0.05,                           speciation_meta = 0.05, extinction_meta = 0.05, env_sigma = 0.5,                          trait_sigma=1,comp_sigma = 0.5, dispersal_prob = 0.1, mutation_rate = 0.01,                          equilib_escape = 1, num_basepairs = 250,                          init_type = 'oceanic_island', niter = 1000, niterTimestep = 100) p_untb <- untbParams(individuals_local = 100, individuals_meta = 1000,                          species_meta = 50,                          speciation = 0.2,                          dispersal_prob = 0.1, init_type = 'oceanic_island',                         niter = 1000, niterTimestep = 100)"},{"path":"/articles/roleR_use_cases.html","id":"model-experiment-creation-running","dir":"Articles","previous_headings":"","what":"Model & Experiment Creation & Running","title":"roleR Use Cases","text":"Create model (yet run) using params, run Create experiment (yet run) containing two models created using sets params, run . Experiment running can parallelized Windows, Mac, & Linux specifying number cores use. run experiment, runs every model within . Experiments intended encapsulate one hypotheses comparison multiple varying models contained within Group Question: encapsulating multiple models experiments useful, rather deal models individually use cases?","code":"model <- roleModel(p) model <- runRole(model) exp <- roleExperiment(list(p,p_untb)) library(parallel) exp <- runRole(exp,cores=2)"},{"path":"/articles/roleR_use_cases.html","id":"extracting-data-from-models","dir":"Articles","previous_headings":"","what":"Extracting Data From Models","title":"roleR Use Cases","text":"Get summary stats time single model, row different saved iteration state. Available raw stats rawAbundance, rawSpAbundance, rawTraits, rawGenDiv, rawBranchLengths, rawApePhylo. Available transformed stats hillAbund, hillGenetic, hillTrait, hillPhylo, richness. Get summary stats time one model experiment Create custom summary statistic extract Group Question: ideas default summary stats add? Group Question: Besides plotting model data model iterations, plotting functions want?","code":"stats <- getSumStats(model, list(rich = richness,hill_abund=hillAbund)) stats stats <- getSumStats(exp@modelRuns[[1]], list(hill_abund=hillAbund)) speciesWith5Indv <- function(x){return(sum(x@localComm@spAbund > 4))}  stats <- getSumStats(exp@modelRuns[[1]], list(sp_with_5=speciesWith5Indv))"},{"path":"/articles/roleR_use_cases.html","id":"extracting-data-from-experiments","dir":"Articles","previous_headings":"","what":"Extracting Data From Experiments","title":"roleR Use Cases","text":"Get dataframe containing saved timesteps models experiment Get dataframe containing model metadata experiment, row experiment associated params Get transformed summary stats (mean stat iteration multiple models) experiment (WIP) Group Question: transformed summary stats summarized multiple models useful? multiple-model-summarizing functions mean? Also let us know concept unclear, little confusing.","code":"stats <- getSumStats(exp, list(hill_abund=hillAbund)) exp_model_params <- exp@experimentMeta # stats <- getSumStats(exp, list(hill_abund_itermean=hillAbundItermean))  ## where hillAbundItermean is a function that applies across an experiment rather than across a roleData"},{"path":"/articles/roleR_use_cases.html","id":"parameter-priors-iter-functions-not-current","dir":"Articles","previous_headings":"","what":"Parameter Priors & Iter-Functions (NOT CURRENT)","title":"roleR Use Cases","text":"Functions can set sample params every iteration step prior function takes inputs returns parameter value Change one parameter sampled normal distribution every iteration iter-function takes iteration number returns parameter value Change one parameter increase linearly every iteration Create simple piecewise function param changes iterations Group Question: ways want vary parameters? priors iterfuncs capture kind parameter variability want? Group Question: considering two ways handling priors iterfuns. first allow parameter slot include either vector function example. second additional class called roleFunctions overwrite params contains, purpose avoiding confusion caused multiple-class slot. Let us know feelings !","code":"# p@speciation_local <- function(){return(rnorm(1,mean=0.05,sd=0.01))} #p@speciation_local <- function(iter){return(iter * 0.001)}  plot(1:1000 * 0.001,xlab = \"iteration\",ylab = \"speciation rate\") #p@env_sigma <- function(iter){  #        if(iter > 400 & iter < 600){  #            return(0.75)  #        }  #        else{  #            return(0.5)  #        }  #    }"},{"path":"/articles/roleR_use_cases.html","id":"simulating-genetic-diversities-not-current","dir":"Articles","previous_headings":"","what":"Simulating Genetic Diversities (NOT CURRENT)","title":"roleR Use Cases","text":"Add genetic diversities run model backwards time simulation using msprime","code":"#model <- simulateSpeciesGenDiv(model)"},{"path":"/articles/roleR_use_cases.html","id":"experiment-organization","dir":"Articles","previous_headings":"","what":"Experiment Organization","title":"roleR Use Cases","text":"Tag models experiment comparison different tags Set metadata experiment within object, exported saving Group Question: basic metadata sufficient? description split specific parts?","code":"names(exp@modelRuns) <- c(\"basic\",\"neut\") exp <- setExpMetadata(exp, author=\"Jacob Idec\", date=\"10/18/22\", description=\"A test experiment\")"},{"path":"/articles/roleR_use_cases.html","id":"writing-and-loading","dir":"Articles","previous_headings":"","what":"Writing and Loading","title":"roleR Use Cases","text":"Write load models, experiments, params","code":"writeRole(exp,dir=\"\",filename=\"test\",save_txt = T)  exp <- readRDS(\"test.roleexperiment\")"},{"path":"/articles/roleR_use_cases.html","id":"predictive-models-not-current","dir":"Articles","previous_headings":"","what":"Predictive Models (NOT CURRENT)","title":"roleR Use Cases","text":"Use run experiment make model predicting parameter summary stats","code":"#pred_model <- createPredModel(exp,param_name = \"speciation_local\", preds=c(\"hill_abund1\",\"hill_abund2\"))"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Rominger. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rominger , Idec J, Diaz R (2023). roleR: Rules Life Engine. R package version 0.1.0.","code":"@Manual{,   title = {roleR: Rules of Life Engine},   author = {Andrew Rominger and Jacob Idec and Renata Diaz},   year = {2023},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"roler","dir":"","previous_headings":"","what":"Rules of Life Engine","title":"Rules of Life Engine","text":"R package implementing RoLE model Installation: Link intro vignette","code":"library(remotes) remotes::install_github(\"role-model/roleR\",dependencies=TRUE)"},{"path":"/reference/createPredModel.html","id":null,"dir":"Reference","previous_headings":"","what":"createPredModel — createPredModel","title":"createPredModel — createPredModel","text":"create random forest model predict parameter value using summary statistics","code":""},{"path":"/reference/createPredModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"createPredModel — createPredModel","text":"","code":"createPredModel(exp, paramName)"},{"path":"/reference/createPredModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"createPredModel — createPredModel","text":"exp roleExperiment use training set paramName parameter predict","code":""},{"path":"/reference/createRolePredModel.html","id":null,"dir":"Reference","previous_headings":"","what":"createRolePredModel — createRolePredModel","title":"createRolePredModel — createRolePredModel","text":"create random forest model predict parameter value using summary statistics","code":""},{"path":"/reference/createRolePredModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"createRolePredModel — createRolePredModel","text":"","code":"createRolePredModel(expr, pred_param_name)"},{"path":"/reference/createRolePredModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"createRolePredModel — createRolePredModel","text":"exp `roleExperiment` use models training validation predParam name parameter predict","code":""},{"path":"/reference/div-sumStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Hill number summary statistics for `roleData` objects — hillAbund","title":"Hill number summary statistics for `roleData` objects — hillAbund","text":"funcitons calculate numbers. naming convention      indicates type hill number function caculates; e.g.      `hillAbund` calcualtes abundance-based Hill numbers, `hillTrait`      calculates trait-based Hill numbers","code":""},{"path":"/reference/div-sumStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hill number summary statistics for `roleData` objects — hillAbund","text":"","code":"hillAbund(x, q = 1:4, ...)  hillGenetic(x, q = 1:4, ...)  hillTrait(x, q = 1:4, ...)  hillPhylo(x, q = 1:4, ...)  richness(x, ...)"},{"path":"/reference/div-sumStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hill number summary statistics for `roleData` objects — hillAbund","text":"x `roleData` object calculate Hill numbers richness q Hill number exponents ... additional parameters, ignored","code":""},{"path":"/reference/getFinalState.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the final state of a model run — getFinalState","title":"Get the final state of a model run — getFinalState","text":"gets final state model either `roleExperiment`      `roleModel`","code":""},{"path":"/reference/getFinalState.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the final state of a model run — getFinalState","text":"","code":"getFinalState(x, modID, ...)"},{"path":"/reference/getFinalState.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the final state of a model run — getFinalState","text":"x object retrieve state modID optional argument retrieve state specific model(s) `roleExperiment` object; can vector unique IDs","code":""},{"path":"/reference/getFinalState.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the final state of a model run — getFinalState","text":"`modID` supplied `x` `roleExperiment`      list `roleData` objects model run returned","code":""},{"path":"/reference/getSumStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get summary statistics for RoLE objects — getSumStats","title":"Get summary statistics for RoLE objects — getSumStats","text":"Applies different summary stats functions `roleExperiment`,     `roleModel`, `roleData`","code":""},{"path":"/reference/getSumStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get summary statistics for RoLE objects — getSumStats","text":"","code":"getSumStats(x, funs = .getDefaultSumStatsFuns(), moreArgs, ...)  # S4 method for roleData getSumStats(x, funs, moreArgs)  # S4 method for roleModel getSumStats(x, funs, moreArgs)  # S4 method for roleExperiment getSumStats(x, funs, moreArgs)"},{"path":"/reference/getSumStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get summary statistics for RoLE objects — getSumStats","text":"x object calculate summary stats across funs named list functions calculate sum stats; can  named list single function many functions, must  named list functions moreArgs optional named list additional arguments pass functions listed `funs`; given, list names must match  `funs`. Note: names `funs` need appear `moreArgs` ... ignored","code":""},{"path":"/reference/getSumStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get summary statistics for RoLE objects — getSumStats","text":"users can define functions, long work     object class `roleData`","code":""},{"path":"/reference/getTimeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a timeseries from a roleModel or roleExperiment as a dataframe — getTimeseries","title":"Get a timeseries from a roleModel or roleExperiment as a dataframe — getTimeseries","text":"Get timeseries roleModel roleExperiment dataframe","code":""},{"path":"/reference/getTimeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a timeseries from a roleModel or roleExperiment as a dataframe — getTimeseries","text":"","code":"getTimeseries(x, ...)"},{"path":"/reference/getTimeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a timeseries from a roleModel or roleExperiment as a dataframe — getTimeseries","text":"x roleModel roleExperiment object get timeseries fun function applies roleData objects gather data  apply applies fun across list roleData roleModel lastColAsTitle specify use last column gathered fun column names output dataframe","code":""},{"path":"/reference/getTimeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a timeseries from a roleModel or roleExperiment as a dataframe — getTimeseries","text":"dataframe containing timeseries","code":""},{"path":"/reference/localComm.html","id":null,"dir":"Reference","previous_headings":"","what":"The local community of a `roleData` — localComm-class","title":"The local community of a `roleData` — localComm-class","text":"S4 class specify state local community","code":""},{"path":"/reference/localComm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The local community of a `roleData` — localComm-class","text":"","code":"localComm(indSpecies, indTrait, indSeqs, spGenDiv)"},{"path":"/reference/localComm.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The local community of a `roleData` — localComm-class","text":"indSpecies numeric vector species IDs individual example indSpecies[2] ID species individual 2 indTrait numeric vector trait values individual indSeqs character vector gene sequences individual spGenDiv numeric vector genetic diversities species spTrait numeric vector mean trait value species spAbund numeric vector abundance (number individuals) species spAbundHarmMean numeric vector harmonic mean species abundances Equivalent n / reciprocal sum abundances since last emergence n number steps reciprocal sum Used genetic simulation roleR spLastOriginStep numeric vector last origin step species last origin step last step new species appeared local community (either totally new extinction local) Used genetic simulation roleR spExtinctionStep numeric vector last extinction (extirpation) step species Used genetic simulation roleR","code":""},{"path":"/reference/metaComm.html","id":null,"dir":"Reference","previous_headings":"","what":"The metacommunity of a `roleData` — metaComm-class","title":"The metacommunity of a `roleData` — metaComm-class","text":"S4 class specify state metacommunity","code":""},{"path":"/reference/metaComm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The metacommunity of a `roleData` — metaComm-class","text":"","code":"metaComm(spAbund, spTrait)"},{"path":"/reference/metaComm.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The metacommunity of a `roleData` — metaComm-class","text":"spAbund numeric vector relative abundances species meta community example spAbundTrt[3] relative abundance species 3 spTrait numeric vector average trait value species meta community","code":""},{"path":"/reference/raw-sumStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get raw data from `roleData` objects — rawAbundance","title":"Get raw data from `roleData` objects — rawAbundance","text":"Gets raw data","code":""},{"path":"/reference/raw-sumStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get raw data from `roleData` objects — rawAbundance","text":"","code":"rawAbundance(x, ...)  rawSppID(x, ...)  rawTraits(x, ...)  rawGenDiv(x, ...)  rawSeqs(x, ...)  rawBranchLengths(x, ...)  rawApePhylo(x, ...)"},{"path":"/reference/raw-sumStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get raw data from `roleData` objects — rawAbundance","text":"x `roleData` object get raw data ... additional parameters, ignored","code":""},{"path":"/reference/raw-sumStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get raw data from `roleData` objects — rawAbundance","text":"list one element, inside one element vector     raw data","code":""},{"path":"/reference/raw-sumStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get raw data from `roleData` objects — rawAbundance","text":"functions return list length one (summary statistics      inside list) summary stats variable     length. distinct summary stat functions     always return fixed length value.  using raw summary stat      functions `getSumStats` returned list column","code":""},{"path":"/reference/roleData.html","id":null,"dir":"Reference","previous_headings":"","what":"A collection of data representing one state of a roleModel — roleData-class","title":"A collection of data representing one state of a roleModel — roleData-class","text":"S4 class represent roleModel state using `localComm`,`metaComm`, & `phylo`","code":""},{"path":"/reference/roleData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A collection of data representing one state of a roleModel — roleData-class","text":"","code":"roleData(localComm, metaComm, phylo)"},{"path":"/reference/roleData.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A collection of data representing one state of a roleModel — roleData-class","text":"localComm `localComm` object containing local community metaComm `metaComm` object containing meta community phylo `rolePhylo` object containing model phylogeny","code":""},{"path":"/reference/roleExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"A complete experiment containing one or more models — roleExperiment-class","title":"A complete experiment containing one or more models — roleExperiment-class","text":"S4 class represent self-enclosed modeling experiment intentioned set models contains list `roleModel`objects, list `roleParams` use model, data.frame summary models, author metadata","code":""},{"path":"/reference/roleExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A complete experiment containing one or more models — roleExperiment-class","text":"","code":"roleExperiment(allParams)"},{"path":"/reference/roleExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A complete experiment containing one or more models — roleExperiment-class","text":"allParams list model params use model","code":""},{"path":"/reference/roleExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A complete experiment containing one or more models — roleExperiment-class","text":"ready--run `roleExperiment`","code":""},{"path":"/reference/roleExperiment.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A complete experiment containing one or more models — roleExperiment-class","text":"modelRuns list `roleModel`objects allParams list `roleParams` use model authorMeta named string vector keep track author metadata contains values \"author\", \"date\", \"description\", \"info\", element named respective string model saved `writeRole` text file generated using metadata experimentMeta data.frame summarizing metadata models experiment  (Need chat Andy exact intentions writing )","code":""},{"path":[]},{"path":"/reference/roleIterFuns.html","id":null,"dir":"Reference","previous_headings":"","what":"Priors of one roleModel — roleIterFuns","title":"Priors of one roleModel — roleIterFuns","text":"Priors one roleModel","code":""},{"path":"/reference/roleIterFuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Priors of one roleModel — roleIterFuns","text":"","code":"roleIterFuns(   individuals_local,   individuals_meta,   species_meta,   speciation_local,   speciation_meta,   extinction_meta,   trait_sigma,   env_sigma,   comp_sigma,   dispersal_prob,   mutation_rate,   equilib_escape,   num_basepairs,   init_type,   niter,   niterTimestep )  roleIterFuns(   individuals_local,   individuals_meta,   species_meta,   speciation_local,   speciation_meta,   extinction_meta,   trait_sigma,   env_sigma,   comp_sigma,   dispersal_prob,   mutation_rate,   equilib_escape,   num_basepairs,   init_type,   niter,   niterTimestep )"},{"path":"/reference/roleIterFuns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Priors of one roleModel — roleIterFuns","text":"parameter `init_type`, `niter`, `niterTimestep`     vector containing either one value `niter` values; `init_type`,      `niter`, `niterTimestep` can take single value (others can     take single vals ...clear )","code":""},{"path":"/reference/roleIterFuns.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Priors of one roleModel — roleIterFuns","text":"individuals_local number individuals local community individuals_meta number individuals meta community species_meta number species meta community speciation_local local speciation probability speciation_meta speciation rate meta community extinction_meta extinction rate meta community trait_sigma rate Brownian trait evolution meta community env_sigma selectivity environmental filter comp_sigma selectivity competition dispersal_prob local dispersal probability mutation_rate mutation rate equilib_escape proportion equilibrium achieved num_basepairs number basepairs init_type initialization routine; single character string either  \"oceanic_island\" \"bridge_island\" niter integer specifying number iterations niterTimestep integer specifying frequency (numbers  iterations) model state saved","code":""},{"path":"/reference/roleModel.html","id":null,"dir":"Reference","previous_headings":"","what":"A single RoLE model — roleModel-class","title":"A single RoLE model — roleModel-class","text":"S4 class holds RoLE eco-evolutionary process model model first initialized using set parameters, run using parameters","code":""},{"path":"/reference/roleModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A single RoLE model — roleModel-class","text":"","code":"roleModel(params)"},{"path":"/reference/roleModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A single RoLE model — roleModel-class","text":"params params use model run","code":""},{"path":"/reference/roleModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A single RoLE model — roleModel-class","text":"ready--run `roleModel`","code":""},{"path":"/reference/roleModel.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A single RoLE model — roleModel-class","text":"modelSteps list `roleData` objects, one snapshot model recorded model ran example, 3rd saved snapshot accessed modelSteps[[3]] Models yet run one timestep modelSteps[[1]] params `roleParams` object containing params use model run","code":""},{"path":[]},{"path":"/reference/roleParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters of one roleModel — roleParams","title":"Parameters of one roleModel — roleParams","text":"S4 class containing params population sizes, rates processes, number iterations run, much ","code":""},{"path":"/reference/roleParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters of one roleModel — roleParams","text":"","code":"roleParams(   individuals_local,   individuals_meta,   species_meta,   speciation_local,   speciation_meta,   extinction_meta,   dispersal_prob,   trait_sigma,   env_sigma,   comp_sigma,   neut_delta = NA,   env_comp_delta = NA,   mutation_rate = NA,   equilib_escape = NA,   alpha = NA,   num_basepairs = NA,   init_type,   niter,   niterTimestep )  roleParams(   individuals_local,   individuals_meta,   species_meta,   speciation_local,   speciation_meta,   extinction_meta,   dispersal_prob,   trait_sigma,   env_sigma,   comp_sigma,   neut_delta = NA,   env_comp_delta = NA,   mutation_rate = NA,   equilib_escape = NA,   alpha = NA,   num_basepairs = NA,   init_type,   niter,   niterTimestep )"},{"path":"/reference/roleParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters of one roleModel — roleParams","text":"individuals_local single numeric value iter function individuals_meta number individuals meta community Used generating log series initial abundances species meta species_meta number species meta community Determines initial size phylogeny speciation_local probability speciation occurring local comm time step new local species can either birth local comm immigration meta comm speciation_meta rate speciation meta community used simulation start phylogeny model run sum speciation_meta extinction_meta average lifetime phylo branches, larger value less new individual traits deviate extinction_meta rate extinction meta community Like speciation_meta, used starting phylo simulation relation traits dispersal_prob probability dispersal (immigration) occurring meta local Every time step, either birth immigration happens, probability birth 1 minus dispersal_prob trait_sigma rate Brownian trait evolution meta community Determines much trait new individual deviates parent; fast traits change env_sigma selectivity environmental filter; strongly environment selects trait values good match larger value, less chance individual survive far trait optimum (0) comp_sigma selectivity competition mutation_rate rate sequence mutation use genetic simulations equilib_escape proportion equilibrium required halt model running return num_basepairs number basepairs use genetic simulations init_type biological model used initialize; single character string can either \"oceanic_island\" \"bridge_island\" bridge island model initial individuals local comm arriving land bridge, oceanic bridge populated single dispersal Thus oceanic island individuals SINGLE species sampled proportional meta comm species abunds,  bridge island species individuals sampled MANY species proportional abundances niter integer specifying number time steps model run niterTimestep integer specifying frequency (numbers  iterations) model state snapshotted saved model's model steps object","code":""},{"path":"/reference/roleParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameters of one roleModel — roleParams","text":"`roleParams` object","code":""},{"path":"/reference/roleParams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameters of one roleModel — roleParams","text":"Params `init_type`, `niter`, `niterTimestep`,      `mutation_rate`,`equilib_escape`,`num_basepairs` take single value.      params numeric vectors containing either one value `niter` values.      one value value used iterations model.      `niter`values different sequential value used iteration","code":""},{"path":"/reference/roleParams.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Parameters of one roleModel — roleParams","text":"individuals_local number individuals local community (J) Determines length individual-level data vectors model initialized, individuals single species metacommunity individuals_meta number individuals meta community Used generating log series initial abundances species meta species_meta number species meta community Determines initial size phylogeny speciation_local probability speciation occurring local comm time step new local species can either birth local comm immigration meta comm speciation_meta rate speciation meta community used simulation start phylogeny model run sum speciation_meta extinction_meta average lifetime phylo branches, larger value less new individual traits deviate extinction_meta rate extinction meta community Like speciation_meta, used starting phylo simulation relation traits trait_sigma rate Brownian trait evolution meta community Determines much trait new individual deviates parent; fast traits change env_sigma selectivity environmental filter; strongly environment selects trait values good match larger value, less chance individual survive far trait optimum (0) comp_sigma selectivity competition dispersal_prob probability dispersal (immigration) occurring meta local Every time step, either birth immigration happens, probability birth 1 minus dispersal_prob mutation_rate rate sequence mutation use genetic simulations equilib_escape proportion equilibrium required halt model running return num_basepairs number basepairs use genetic simulations init_type biological model used initialize; single character string can either \"oceanic_island\" \"bridge_island\" bridge island model initial individuals local comm arriving land bridge, oceanic bridge populated single dispersal Thus oceanic island individuals SINGLE species sampled proportional meta comm species abunds,  bridge island species individuals sampled MANY species proportional abundances niter integer specifying number time steps model run niterTimestep integer specifying frequency (numbers  iterations) model state snapshotted saved model's model steps object","code":""},{"path":[]},{"path":"/reference/rolePhylo-class.html","id":null,"dir":"Reference","previous_headings":"","what":"RoLE phylogeny — rolePhylo-class","title":"RoLE phylogeny — rolePhylo-class","text":"S4 class specify phylogeny way can easily     evolved simulation","code":""},{"path":"/reference/rolePhylo-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"RoLE phylogeny — rolePhylo-class","text":"n number tips e edge matrix; two columns give ancestor, child pair l numeric vector edge lengths (units time steps = 1/J generations) alive vector indicating whether tips extant tipNames vector tip names scale time scale translation years","code":""},{"path":"/reference/rolePhylo.html","id":null,"dir":"Reference","previous_headings":"","what":"A phylogeny of all the species of a `roleData` — rolePhylo-class","title":"A phylogeny of all the species of a `roleData` — rolePhylo-class","text":"S4 class specify phylogeny purpose RoLE model","code":""},{"path":"/reference/rolePhylo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A phylogeny of all the species of a `roleData` — rolePhylo-class","text":"","code":"rolePhylo(n, e, l, alive, tipNames, scale)"},{"path":"/reference/rolePhylo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A phylogeny of all the species of a `roleData` — rolePhylo-class","text":"n  e  l  alive  tipNames","code":""},{"path":"/reference/rolePhylo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A phylogeny of all the species of a `roleData` — rolePhylo-class","text":"`rolePhylo` object","code":""},{"path":"/reference/rolePhylo.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A phylogeny of all the species of a `roleData` — rolePhylo-class","text":"n number tips phylogeny e numeric edge matrix phylogeny row contains ancestor-child pair 1st column ancestor 2nd child l numeric vector edge lengths  units l time steps (iterations) model time step unit equal 1/J generations J number individuals local community alive logical vector indicating whether tips extant tipNames character vector names tip scale single numeric value time scale translation years","code":""},{"path":"/reference/rolePriors.html","id":null,"dir":"Reference","previous_headings":"","what":"Priors of one roleModel — rolePriors","title":"Priors of one roleModel — rolePriors","text":"Priors one roleModel","code":""},{"path":"/reference/rolePriors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Priors of one roleModel — rolePriors","text":"","code":"rolePriors(   individuals_local,   individuals_meta,   species_meta,   speciation_local,   speciation_meta,   extinction_meta,   trait_sigma,   env_sigma,   comp_sigma,   dispersal_prob,   mutation_rate,   equilib_escape,   num_basepairs,   init_type,   niter,   niterTimestep )  rolePriors(   individuals_local,   individuals_meta,   species_meta,   speciation_local,   speciation_meta,   extinction_meta,   trait_sigma,   env_sigma,   comp_sigma,   dispersal_prob,   mutation_rate,   equilib_escape,   num_basepairs,   init_type,   niter,   niterTimestep )"},{"path":"/reference/rolePriors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Priors of one roleModel — rolePriors","text":"parameter `init_type`, `niter`, `niterTimestep`     vector containing either one value `niter` values; `init_type`,      `niter`, `niterTimestep` can take single value (others can     take single vals ...clear )","code":""},{"path":"/reference/rolePriors.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Priors of one roleModel — rolePriors","text":"individuals_local number individuals local community individuals_meta number individuals meta community species_meta number species meta community speciation_local local speciation probability speciation_meta speciation rate meta community extinction_meta extinction rate meta community trait_sigma rate Brownian trait evolution meta community env_sigma selectivity environmental filter comp_sigma selectivity competition dispersal_prob local dispersal probability mutation_rate mutation rate equilib_escape proportion equilibrium achieved num_basepairs number basepairs init_type initialization routine; single character string either  \"oceanic_island\" \"bridge_island\" niter integer specifying number iterations niterTimestep integer specifying frequency (numbers  iterations) model state saved","code":""},{"path":"/reference/runRoLE.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a `roleModel` or `roleExperiment` — runRole","title":"Run a `roleModel` or `roleExperiment` — runRole","text":"Iterate RoLE object completion using parameters","code":""},{"path":"/reference/runRoLE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a `roleModel` or `roleExperiment` — runRole","text":"","code":"runRole(x, cores = 1, print = F)"},{"path":"/reference/runRoLE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a `roleModel` or `roleExperiment` — runRole","text":"x `roleModel` `roleModel` object run print whether print step information model runs","code":""},{"path":"/reference/runRoLE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a `roleModel` or `roleExperiment` — runRole","text":"`roleModel` `roleExperiment` run completion","code":""},{"path":[]},{"path":"/reference/setExpMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Set metadata from an experiment — setExpMetadata","title":"Set metadata from an experiment — setExpMetadata","text":"Set metadata experiment","code":""},{"path":"/reference/setExpMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set metadata from an experiment — setExpMetadata","text":"","code":"setExpMetadata(x, author, datestring, description)  # S4 method for roleExperiment setExpMetadata(x, author, datestring, description)"},{"path":"/reference/setExpMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set metadata from an experiment — setExpMetadata","text":"x object set metadata ","code":""},{"path":"/reference/simGen.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate genetic variation — simGen","title":"Simulate genetic variation — simGen","text":"Calls msprime API generate genetic data","code":""},{"path":"/reference/simGen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate genetic variation — simGen","text":"","code":"simGen(   localPop,   metaPop,   localSamp,   mutationRate,   immRate,   maxTime,   bp,   ploidy,   msp )"},{"path":"/reference/simGen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate genetic variation — simGen","text":"localSamp number local individuals bp number basepairs msp R object wrapping msprime module (returned reticualte::import)","code":""},{"path":"/reference/simulateSpeciesGenDiv.html","id":null,"dir":"Reference","previous_headings":"","what":"using msprime simulation, add genetic diversities to a roleExperiment or roleModel for each species — simulateSpeciesGenDiv","title":"using msprime simulation, add genetic diversities to a roleExperiment or roleModel for each species — simulateSpeciesGenDiv","text":"using msprime simulation, add genetic diversities roleExperiment roleModel species","code":""},{"path":"/reference/simulateSpeciesGenDiv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"using msprime simulation, add genetic diversities to a roleExperiment or roleModel for each species — simulateSpeciesGenDiv","text":"","code":"simulateSpeciesGenDiv(model)"},{"path":"/reference/simulateSpeciesGenDiv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"using msprime simulation, add genetic diversities to a roleExperiment or roleModel for each species — simulateSpeciesGenDiv","text":"x roleModel roleExperiment object get stat ","code":""},{"path":"/reference/simulateSpeciesGenDiv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"using msprime simulation, add genetic diversities to a roleExperiment or roleModel for each species — simulateSpeciesGenDiv","text":"dataframe containing timeseries","code":""},{"path":"/reference/writeRoLE.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a RoLE model, experiment, or params — writeRole","title":"Write a RoLE model, experiment, or params — writeRole","text":"Write RoLE model, experiment, params","code":""},{"path":"/reference/writeRoLE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a RoLE model, experiment, or params — writeRole","text":"","code":"writeRole(x, dir, filename, save_txt)"},{"path":"/reference/writeRoLE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a RoLE model, experiment, or params — writeRole","text":"x object write dir directory (path) write object filename name file save File called *filename*.roleexperiment","code":""}]
