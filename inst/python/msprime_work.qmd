---
title: "msprime work"
format: html
---

## `roleR` set-up

```{r}
library(roleR)
library(ape)
library(reticulate)

# Point to the new Python environment
# use_python("/opt/anaconda3/envs/msprime_stable/bin/python", required = TRUE)

# check python config
py_config()
py_module_available("msprime")

# Assuming this function is available to me
newick <- function(phylo){
    ape_tree <- as(phylo, "phylo")
    # ape_tree <- phylo
    write.tree(ape_tree, file = 'temp.nwk', append = FALSE, digits = 30, tree.names = FALSE)
    nwk <- readChar('temp.nwk', file.info('temp.nwk')$size)
    unlink('temp.nwk')
    return(nwk)
}

# init_type may be bridge_island or oceanic_island
la <- 0.00005
mu <- 0.95 * la
p <- roleParams(individuals_local = 100, individuals_meta = 10000,
                species_meta = 3, speciation_local = 0, 
                speciation_meta = la, extinction_meta = mu, env_sigma = 0.5,
                trait_sigma=1, comp_sigma = 0.5, dispersal_prob = 0.01, 
                mutation_rate = 1e-6,
                equilib_escape = 1, num_basepairs = 500, alpha = 10000,
                init_type = 'bridge_island', niter = 100, niterTimestep = 100)
temp <- roleModel(p)
model <- runRole(temp)

tre <- model@modelSteps[[1]]@phylo
a <- as(tre, "phylo")
a$edge 

plot(a)
axis(1)
```

```{r}
# Assumes you are passing in roleModel which has been run
sim_seqs <- function(model){
    source_python("inst/python/role_msprime.py")
    #exp = as(model, "roleExperiment")
    
    ## the timesteps at which data were recorded
    ## TODO: Doing it this way because the as() above is broken atm
    iterations <- c(0, which(1:model@params@niter %% model@params@niterTimestep == 0))
    
    ## Global parameters
    J_m <- model@params@individuals_meta
    mu <- model@params@mutation_rate
    sequence_length <- model@params@num_basepairs
    
    ## For each snapshot
    for (idx in 1:length(model@modelSteps)){
        ## Fetch the data that we need to run the msprime simulation
        ## Current time in timesteps (necessary to get divergence counting from t_0)
        ## TODO: If as(model, "roleExperiment") works then you can do this instead.
        #curtime = exp@experimentMeta$iterations[[idx]]
        curtime = iterations[[idx]]
        
        ## Prior to iterFun it was done this way:
        ##J <- model@params@individuals_local[[idx]]
        J <- model@params@individuals_local(idx)
        alpha <- model@params@alpha(idx)
        
        
        
        
        metaAbund <- model@modelSteps[[idx]]@metaComm@spAbund
        
        # metaTree <- rphylo(length(metaAbund), 0.05, 0.01)
        metaTree <- model@modelSteps[[idx]]@phylo
        
        metaTree <- newick(metaTree)
        
        localAbund <- model@modelSteps[[idx]]@localComm@indSpecies
        spAbundHarmMean <- model@modelSteps[[idx]]@localComm@spAbundHarmMean
        localTDiv <- model@modelSteps[[idx]]@localComm@spLastOriginStep
        
        ## Returns a dataframe with rows for pi, TajD and genotypes
        res <- py_msprime_simulate(J_m, J, curtime, metaTree, metaAbund, localAbund,
                                   spAbundHarmMean, localTDiv, alpha, sequence_length, mu,
                                   verbose=FALSE)
        
        ## Update the model with the results
        model@modelSteps[[idx]]@localComm@spGenDiv = unlist(res["pi",])
        model@modelSteps[[idx]]@localComm@indSeqs = unlist(res["gtypes",])
        
    }
    return(model)
}
```

```{r}
res <- sim_seqs(model)
res
res@modelSteps[[2]]@localComm@spGenDiv
```
