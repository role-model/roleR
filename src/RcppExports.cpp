// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compMatCalcTest
NumericMatrix compMatCalcTest(NumericMatrix x, double sigC);
RcppExport SEXP _roleR_compMatCalcTest(SEXP xSEXP, SEXP sigCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type sigC(sigCSEXP);
    rcpp_result_gen = Rcpp::wrap(compMatCalcTest(x, sigC));
    return rcpp_result_gen;
END_RCPP
}
// envDistCalcTest
NumericVector envDistCalcTest(NumericMatrix x, NumericMatrix envOptim, double sigE);
RcppExport SEXP _roleR_envDistCalcTest(SEXP xSEXP, SEXP envOptimSEXP, SEXP sigESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type envOptim(envOptimSEXP);
    Rcpp::traits::input_parameter< double >::type sigE(sigESEXP);
    rcpp_result_gen = Rcpp::wrap(envDistCalcTest(x, envOptim, sigE));
    return rcpp_result_gen;
END_RCPP
}
// getParamFun
NumericVector getParamFun(S4 p, String s);
RcppExport SEXP _roleR_getParamFun(SEXP pSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type p(pSEXP);
    Rcpp::traits::input_parameter< String >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(getParamFun(p, s));
    return rcpp_result_gen;
END_RCPP
}
// roleCommTester
List roleCommTester(S4 x, S4 p);
RcppExport SEXP _roleR_roleCommTester(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type x(xSEXP);
    Rcpp::traits::input_parameter< S4 >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(roleCommTester(x, p));
    return rcpp_result_gen;
END_RCPP
}
// s4FromRcpp
S4 s4FromRcpp(List x);
RcppExport SEXP _roleR_s4FromRcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(s4FromRcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// testUpdatePhylo
S4 testUpdatePhylo(List tre, int i, double scale);
RcppExport SEXP _roleR_testUpdatePhylo(SEXP treSEXP, SEXP iSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type tre(treSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(testUpdatePhylo(tre, i, scale));
    return rcpp_result_gen;
END_RCPP
}
// simRole
List simRole(S4 x, S4 p);
RcppExport SEXP _roleR_simRole(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type x(xSEXP);
    Rcpp::traits::input_parameter< S4 >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(simRole(x, p));
    return rcpp_result_gen;
END_RCPP
}
// wtf
NumericVector wtf(NumericVector x);
RcppExport SEXP _roleR_wtf(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(wtf(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_roleR_compMatCalcTest", (DL_FUNC) &_roleR_compMatCalcTest, 2},
    {"_roleR_envDistCalcTest", (DL_FUNC) &_roleR_envDistCalcTest, 3},
    {"_roleR_getParamFun", (DL_FUNC) &_roleR_getParamFun, 2},
    {"_roleR_roleCommTester", (DL_FUNC) &_roleR_roleCommTester, 2},
    {"_roleR_s4FromRcpp", (DL_FUNC) &_roleR_s4FromRcpp, 1},
    {"_roleR_testUpdatePhylo", (DL_FUNC) &_roleR_testUpdatePhylo, 3},
    {"_roleR_simRole", (DL_FUNC) &_roleR_simRole, 2},
    {"_roleR_wtf", (DL_FUNC) &_roleR_wtf, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_roleR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
